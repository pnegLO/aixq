{"ast":null,"code":"var _jsxFileName = \"/Users/peng/Desktop/\\u4EBA\\u5DE5\\u667A\\u80FD\\u7B56\\u7565/chinese-chess-game/client/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initializeBoard, isValidMove, isCheck, checkGameEnd, COLORS } from '../utils/chessRules';\nimport ChessBoard from '../components/ChessBoard';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [board, setBoard] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(COLORS.RED); // 红方先行\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [winner, setWinner] = useState(null);\n  const [isCheckState, setIsCheckState] = useState(false);\n  const navigate = useNavigate();\n\n  // 初始化棋盘\n  useEffect(() => {\n    resetGame();\n  }, []);\n\n  // 重置游戏\n  const resetGame = () => {\n    const newBoard = initializeBoard();\n    setBoard(newBoard);\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(COLORS.RED);\n    setGameStatus('playing');\n    setWinner(null);\n    setIsCheckState(false);\n  };\n\n  // 处理棋盘点击\n  const handleCellClick = (row, col) => {\n    if (gameStatus !== 'playing') return;\n\n    // 如果已经选择了一个棋子，尝试移动\n    if (selectedCell) {\n      const {\n        row: fromRow,\n        col: fromCol\n      } = selectedCell;\n      const piece = board[fromRow][fromCol];\n\n      // 如果点击的是同一个位置，取消选择\n      if (fromRow === row && fromCol === col) {\n        setSelectedCell(null);\n        setValidMoves([]);\n        return;\n      }\n\n      // 如果点击了另一个自己的棋子，改变选择\n      if (board[row][col] && board[row][col].color === currentTurn) {\n        selectPiece(row, col);\n        return;\n      }\n\n      // 尝试移动棋子\n      if (validMoves.some(move => move.row === row && move.col === col)) {\n        // 创建新的棋盘状态\n        const newBoard = JSON.parse(JSON.stringify(board));\n        newBoard[row][col] = piece;\n        newBoard[fromRow][fromCol] = null;\n\n        // 更新棋盘状态\n        setBoard(newBoard);\n        setSelectedCell(null);\n        setValidMoves([]);\n\n        // 检查将军和将死状态\n        const opponentColor = currentTurn === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n        const isCheckState = isCheck(newBoard, opponentColor);\n        setIsCheckState(isCheckState);\n\n        // 检查游戏是否结束\n        const {\n          isGameOver,\n          winner\n        } = checkGameEnd(newBoard, currentTurn);\n        if (isGameOver) {\n          setGameStatus('over');\n          setWinner(winner);\n        } else {\n          // 交换回合\n          setCurrentTurn(opponentColor);\n        }\n      }\n    } else {\n      // 如果没有选择棋子，尝试选择一个\n      const piece = board[row][col];\n      if (piece && piece.color === currentTurn) {\n        selectPiece(row, col);\n      }\n    }\n  };\n\n  // 选择棋子，计算有效移动\n  const selectPiece = (row, col) => {\n    setSelectedCell({\n      row,\n      col\n    });\n\n    // 计算有效移动\n    const piece = board[row][col];\n    const newValidMoves = [];\n    for (let toRow = 0; toRow < 10; toRow++) {\n      for (let toCol = 0; toCol < 9; toCol++) {\n        if (isValidMove(piece, board, row, col, toRow, toCol)) {\n          // 模拟移动，检查是否会导致自己被将军\n          const newBoard = JSON.parse(JSON.stringify(board));\n          newBoard[toRow][toCol] = newBoard[row][col];\n          newBoard[row][col] = null;\n          if (!isCheck(newBoard, piece.color)) {\n            newValidMoves.push({\n              row: toRow,\n              col: toCol\n            });\n          }\n        }\n      }\n    }\n    setValidMoves(newValidMoves);\n  };\n\n  // 返回主页\n  const goToHome = () => {\n    navigate('/');\n  };\n  if (!board) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u52A0\\u8F7D\\u4E2D...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u672C\\u5730\\u5BF9\\u6218\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u5F53\\u524D\\u56DE\\u5408: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: currentTurn === COLORS.RED ? 'red-text' : 'black-text',\n            children: currentTurn === COLORS.RED ? '红方' : '黑方'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), isCheckState && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"check-warning\",\n          children: \"\\u5C06\\u519B\\uFF01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 28\n        }, this), gameStatus === 'over' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-result\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6E38\\u620F\\u7ED3\\u675F\\uFF01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [winner === COLORS.RED ? '红方' : '黑方', \"\\u83B7\\u80DC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"\\u91CD\\u65B0\\u5F00\\u59CB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToHome,\n          children: \"\\u8FD4\\u56DE\\u4E3B\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(ChessBoard, {\n        board: board,\n        selectedCell: selectedCell,\n        validMoves: validMoves,\n        onCellClick: handleCellClick,\n        perspective: COLORS.RED\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"NaOsIy2cfnl2te/zQxHMQXJZSps=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","initializeBoard","isValidMove","isCheck","checkGameEnd","COLORS","ChessBoard","jsxDEV","_jsxDEV","Game","_s","board","setBoard","selectedCell","setSelectedCell","validMoves","setValidMoves","currentTurn","setCurrentTurn","RED","gameStatus","setGameStatus","winner","setWinner","isCheckState","setIsCheckState","navigate","resetGame","newBoard","handleCellClick","row","col","fromRow","fromCol","piece","color","selectPiece","some","move","JSON","parse","stringify","opponentColor","BLACK","isGameOver","newValidMoves","toRow","toCol","push","goToHome","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","onCellClick","perspective","_c","$RefreshReg$"],"sources":["/Users/peng/Desktop/人工智能策略/chinese-chess-game/client/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initializeBoard, isValidMove, isCheck, checkGameEnd, COLORS } from '../utils/chessRules';\nimport ChessBoard from '../components/ChessBoard';\nimport './Game.css';\n\nconst Game = () => {\n  const [board, setBoard] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(COLORS.RED); // 红方先行\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [winner, setWinner] = useState(null);\n  const [isCheckState, setIsCheckState] = useState(false);\n  const navigate = useNavigate();\n\n  // 初始化棋盘\n  useEffect(() => {\n    resetGame();\n  }, []);\n\n  // 重置游戏\n  const resetGame = () => {\n    const newBoard = initializeBoard();\n    setBoard(newBoard);\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(COLORS.RED);\n    setGameStatus('playing');\n    setWinner(null);\n    setIsCheckState(false);\n  };\n\n  // 处理棋盘点击\n  const handleCellClick = (row, col) => {\n    if (gameStatus !== 'playing') return;\n\n    // 如果已经选择了一个棋子，尝试移动\n    if (selectedCell) {\n      const { row: fromRow, col: fromCol } = selectedCell;\n      const piece = board[fromRow][fromCol];\n\n      // 如果点击的是同一个位置，取消选择\n      if (fromRow === row && fromCol === col) {\n        setSelectedCell(null);\n        setValidMoves([]);\n        return;\n      }\n\n      // 如果点击了另一个自己的棋子，改变选择\n      if (board[row][col] && board[row][col].color === currentTurn) {\n        selectPiece(row, col);\n        return;\n      }\n\n      // 尝试移动棋子\n      if (validMoves.some(move => move.row === row && move.col === col)) {\n        // 创建新的棋盘状态\n        const newBoard = JSON.parse(JSON.stringify(board));\n        newBoard[row][col] = piece;\n        newBoard[fromRow][fromCol] = null;\n\n        // 更新棋盘状态\n        setBoard(newBoard);\n        setSelectedCell(null);\n        setValidMoves([]);\n\n        // 检查将军和将死状态\n        const opponentColor = currentTurn === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n        const isCheckState = isCheck(newBoard, opponentColor);\n        setIsCheckState(isCheckState);\n\n        // 检查游戏是否结束\n        const { isGameOver, winner } = checkGameEnd(newBoard, currentTurn);\n        if (isGameOver) {\n          setGameStatus('over');\n          setWinner(winner);\n        } else {\n          // 交换回合\n          setCurrentTurn(opponentColor);\n        }\n      }\n    } else {\n      // 如果没有选择棋子，尝试选择一个\n      const piece = board[row][col];\n      if (piece && piece.color === currentTurn) {\n        selectPiece(row, col);\n      }\n    }\n  };\n\n  // 选择棋子，计算有效移动\n  const selectPiece = (row, col) => {\n    setSelectedCell({ row, col });\n    \n    // 计算有效移动\n    const piece = board[row][col];\n    const newValidMoves = [];\n    \n    for (let toRow = 0; toRow < 10; toRow++) {\n      for (let toCol = 0; toCol < 9; toCol++) {\n        if (isValidMove(piece, board, row, col, toRow, toCol)) {\n          // 模拟移动，检查是否会导致自己被将军\n          const newBoard = JSON.parse(JSON.stringify(board));\n          newBoard[toRow][toCol] = newBoard[row][col];\n          newBoard[row][col] = null;\n          \n          if (!isCheck(newBoard, piece.color)) {\n            newValidMoves.push({ row: toRow, col: toCol });\n          }\n        }\n      }\n    }\n    \n    setValidMoves(newValidMoves);\n  };\n\n  // 返回主页\n  const goToHome = () => {\n    navigate('/');\n  };\n\n  if (!board) return <div>加载中...</div>;\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-info\">\n        <h1>本地对战</h1>\n        <div className=\"status-panel\">\n          <p>当前回合: <span className={currentTurn === COLORS.RED ? 'red-text' : 'black-text'}>\n            {currentTurn === COLORS.RED ? '红方' : '黑方'}\n          </span></p>\n          {isCheckState && <p className=\"check-warning\">将军！</p>}\n          {gameStatus === 'over' && (\n            <div className=\"game-result\">\n              <p>游戏结束！</p>\n              <p>{winner === COLORS.RED ? '红方' : '黑方'}获胜</p>\n            </div>\n          )}\n        </div>\n        <div className=\"control-panel\">\n          <button onClick={resetGame}>重新开始</button>\n          <button onClick={goToHome}>返回主页</button>\n        </div>\n      </div>\n      <div className=\"board-container\">\n        <ChessBoard\n          board={board}\n          selectedCell={selectedCell}\n          validMoves={validMoves}\n          onCellClick={handleCellClick}\n          perspective={COLORS.RED}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}