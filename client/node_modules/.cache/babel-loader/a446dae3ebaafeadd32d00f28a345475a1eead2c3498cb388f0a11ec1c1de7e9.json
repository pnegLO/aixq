{"ast":null,"code":"var _jsxFileName = \"/Users/peng/Desktop/\\u4EBA\\u5DE5\\u667A\\u80FD\\u7B56\\u7565/chinese-chess-game/client/src/pages/AIGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initializeBoard, isValidMove, isCheck, checkGameEnd, COLORS } from '../utils/chessRules';\nimport { getBestMove } from '../utils/chessAI';\nimport ChessBoard from '../components/ChessBoard';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AIGame = () => {\n  _s();\n  const [board, setBoard] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(COLORS.RED); // 红方先行\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [winner, setWinner] = useState(null);\n  const [isCheckState, setIsCheckState] = useState(false);\n  const [difficulty, setDifficulty] = useState(3); // 默认难度级别为3\n  const [playerColor, setPlayerColor] = useState(COLORS.RED); // 默认玩家执红\n  const [moveHistory, setMoveHistory] = useState([]);\n  const navigate = useNavigate();\n\n  // 初始化棋盘\n  useEffect(() => {\n    console.log('初始化棋盘useEffect触发, 玩家颜色:', playerColor);\n    resetGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playerColor]);\n\n  // 调试当前回合和玩家颜色的变化\n  useEffect(() => {\n    console.log('回合/玩家颜色状态更新 - 当前回合:', currentTurn, '玩家颜色:', playerColor, '是否为玩家回合:', currentTurn === playerColor);\n  }, [currentTurn, playerColor]);\n\n  // 重置游戏\n  const resetGame = () => {\n    console.log('重置游戏，玩家颜色:', playerColor);\n    const newBoard = initializeBoard();\n    console.log('初始化新棋盘');\n\n    // 重置所有状态\n    setBoard(newBoard);\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(COLORS.RED); // 红方永远先行\n    setGameStatus('playing');\n    setWinner(null);\n    setIsCheckState(false);\n    setMoveHistory([]);\n    console.log('游戏状态重置完成');\n\n    // 如果AI是红方且先行，立即执行AI移动\n    if (playerColor === COLORS.BLACK) {\n      console.log('AI执红先行，准备AI移动');\n      // 使用更长的延迟确保状态已经完全更新\n      setTimeout(() => {\n        // 重要：直接检查玩家颜色和当前回合\n        console.log('准备AI首步，检查状态 - 玩家颜色:', playerColor, '当前回合:', COLORS.RED);\n        if (playerColor === COLORS.BLACK) {\n          console.log('确认执行AI首步移动');\n\n          // 创建确保状态为最新的函数\n          const executeAIFirstMove = () => {\n            // 创建一个静态复制的棋盘，不依赖于可能变化的状态\n            const boardCopy = JSON.parse(JSON.stringify(newBoard));\n\n            // 强制设置正确的状态条件\n            setCurrentTurn(COLORS.RED); // 确保当前回合为红方\n\n            // 使用另一个延迟确保状态已更新\n            setTimeout(() => {\n              console.log('执行AI首步移动，使用静态棋盘复制');\n              try {\n                // 直接调用AI移动逻辑\n                const move = getBestMove(boardCopy, COLORS.RED, difficulty);\n                if (move) {\n                  const {\n                    fromRow,\n                    fromCol,\n                    toRow,\n                    toCol\n                  } = move;\n                  console.log('AI首步移动:', move);\n                  makeMove(fromRow, fromCol, toRow, toCol);\n                } else {\n                  console.error('AI无法计算首步移动');\n                }\n              } catch (error) {\n                console.error('AI首步计算出错:', error);\n              }\n            }, 300);\n          };\n\n          // 执行AI首步移动\n          executeAIFirstMove();\n        } else {\n          console.log('状态不匹配，AI不执行首步移动');\n        }\n      }, 500);\n    } else {\n      console.log('玩家执红先行');\n    }\n  };\n\n  // 当前是否轮到玩家行动\n  const isPlayerTurn = currentTurn === playerColor;\n\n  // 格子点击处理\n  const handleCellClick = (row, col) => {\n    try {\n      console.log('点击格子:', row, col, '当前回合:', currentTurn, '是否玩家回合:', isPlayerTurn);\n\n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的格子坐标:', row, col);\n        return;\n      }\n\n      // 游戏结束或非玩家回合时不允许操作\n      if (gameStatus !== 'playing' || !isPlayerTurn) {\n        if (gameStatus !== 'playing') {\n          console.log('游戏已结束，无法移动');\n        } else {\n          console.log('当前不是您的回合，玩家颜色:', playerColor, '当前回合:', currentTurn);\n        }\n        return;\n      }\n      const clickedPiece = board[row][col];\n      console.log('点击的棋子:', clickedPiece);\n\n      // 如果已选中棋子，尝试移动\n      if (selectedCell) {\n        const {\n          row: selectedRow,\n          col: selectedCol\n        } = selectedCell;\n        console.log('当前已选中棋子:', selectedRow, selectedCol);\n\n        // 验证选中的格子是否有效\n        if (selectedRow < 0 || selectedRow >= 10 || selectedCol < 0 || selectedCol >= 9) {\n          console.error('无效的已选中格子:', selectedCell);\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n        const selectedPiece = board[selectedRow][selectedCol];\n        console.log('已选中的棋子:', selectedPiece);\n\n        // 点击同一个棋子，取消选择\n        if (selectedRow === row && selectedCol === col) {\n          console.log('取消选择当前棋子');\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n\n        // 检查是否是有效移动\n        const isValid = validMoves.some(move => move.row === row && move.col === col);\n        console.log('是否有效移动:', isValid, '有效移动列表:', validMoves);\n        if (selectedPiece && selectedPiece.color === currentTurn && isValid) {\n          console.log('执行有效移动');\n          // 执行移动\n          makeMove(selectedRow, selectedCol, row, col);\n        } else if (clickedPiece && clickedPiece.color === currentTurn) {\n          console.log('选择新的己方棋子');\n          // 选择新的己方棋子\n          selectPiece(row, col);\n        } else {\n          console.log('无效点击，取消选择');\n          // 无效点击，取消选择\n          setSelectedCell(null);\n          setValidMoves([]);\n        }\n      }\n      // 如果未选中棋子，选择一个棋子\n      else if (clickedPiece && clickedPiece.color === currentTurn) {\n        console.log('选择己方棋子');\n        selectPiece(row, col);\n      } else if (clickedPiece) {\n        console.log('不能选择对方的棋子');\n      } else {\n        console.log('此处没有棋子');\n      }\n    } catch (error) {\n      console.error('点击处理出错:', error);\n      // 重置选择状态\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 选择棋子，计算有效移动\n  const selectPiece = (row, col) => {\n    try {\n      console.log('选择棋子:', row, col);\n\n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的棋子坐标:', row, col);\n        return;\n      }\n\n      // 验证有棋子\n      const piece = board[row][col];\n      if (!piece) {\n        console.error('该位置没有棋子:', row, col);\n        return;\n      }\n\n      // 验证是当前回合的棋子\n      if (piece.color !== currentTurn) {\n        console.error('不是当前回合的棋子:', piece, '当前回合:', currentTurn);\n        return;\n      }\n      setSelectedCell({\n        row,\n        col\n      });\n      console.log('已选中棋子:', {\n        row,\n        col\n      }, piece);\n\n      // 计算有效移动\n      const newValidMoves = [];\n      for (let toRow = 0; toRow < 10; toRow++) {\n        for (let toCol = 0; toCol < 9; toCol++) {\n          try {\n            if (isValidMove(piece, board, row, col, toRow, toCol)) {\n              // 模拟移动，检查是否会导致自己被将军\n              try {\n                const newBoard = JSON.parse(JSON.stringify(board));\n                newBoard[toRow][toCol] = newBoard[row][col];\n                newBoard[row][col] = null;\n                if (!isCheck(newBoard, piece.color)) {\n                  newValidMoves.push({\n                    row: toRow,\n                    col: toCol\n                  });\n                }\n              } catch (checkError) {\n                console.error('检查将军状态时出错:', checkError, toRow, toCol);\n                // 跳过这个移动\n                continue;\n              }\n            }\n          } catch (moveError) {\n            console.error('检查有效移动时出错:', moveError, toRow, toCol);\n            // 跳过这个移动\n            continue;\n          }\n        }\n      }\n      console.log('计算有效移动数量:', newValidMoves.length, newValidMoves);\n\n      // 如果没有有效移动，提示用户\n      if (newValidMoves.length === 0) {\n        console.log('没有有效移动可用');\n      }\n      setValidMoves(newValidMoves);\n    } catch (error) {\n      console.error('选择棋子出错:', error);\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 执行移动\n  const makeMove = (fromRow, fromCol, toRow, toCol) => {\n    try {\n      console.log('执行移动:', fromRow, fromCol, toRow, toCol, '当前回合:', currentTurn);\n\n      // 验证坐标\n      if (fromRow < 0 || fromRow >= 10 || fromCol < 0 || fromCol >= 9 || toRow < 0 || toRow >= 10 || toCol < 0 || toCol >= 9) {\n        console.error('无效的移动坐标:', fromRow, fromCol, toRow, toCol);\n        return;\n      }\n\n      // 验证起始位置有棋子\n      if (!board[fromRow] || !board[fromRow][fromCol]) {\n        console.error('起始位置没有棋子:', fromRow, fromCol);\n        return;\n      }\n\n      // 验证是当前回合的棋子\n      const piece = board[fromRow][fromCol];\n      if (!piece || piece.color !== currentTurn) {\n        console.error('不是当前回合的棋子:', piece, '当前回合:', currentTurn);\n        return;\n      }\n\n      // 创建新棋盘（深拷贝）\n      const newBoard = JSON.parse(JSON.stringify(board));\n\n      // 记录移动历史\n      const historyEntry = {\n        fromRow,\n        fromCol,\n        toRow,\n        toCol,\n        piece: board[fromRow][fromCol],\n        captured: board[toRow][toCol],\n        board: JSON.parse(JSON.stringify(board))\n      };\n      console.log('记录移动历史:', historyEntry);\n      setMoveHistory(prev => [...prev, historyEntry]);\n\n      // 执行移动\n      newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n      newBoard[fromRow][fromCol] = null;\n\n      // 更新棋盘状态\n      console.log('更新棋盘状态');\n      setBoard(newBoard);\n      setSelectedCell(null);\n      setValidMoves([]);\n\n      // 切换回合\n      const nextTurn = currentTurn === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n      console.log('切换回合:', currentTurn, '->', nextTurn);\n      setCurrentTurn(nextTurn);\n\n      // 检查是否将军\n      try {\n        const isInCheck = isCheck(newBoard, nextTurn);\n        console.log('是否将军:', isInCheck, '下一回合:', nextTurn);\n        setIsCheckState(isInCheck);\n      } catch (checkError) {\n        console.error('检查是否将军时出错:', checkError);\n      }\n\n      // 检查游戏是否结束\n      try {\n        const gameEndResult = checkGameEnd(newBoard, currentTurn);\n        console.log('游戏是否结束:', gameEndResult);\n        if (gameEndResult.isGameOver) {\n          console.log('游戏结束，胜者:', gameEndResult.winner);\n          setGameStatus('over');\n          setWinner(gameEndResult.winner);\n          return; // 游戏结束，不再执行AI移动\n        } else {\n          // 如果下一回合是AI的回合，让AI行动\n          if (nextTurn !== playerColor) {\n            console.log('准备执行AI移动，延迟500ms');\n            // 使用timeout而不是直接调用，确保状态更新后再执行AI移动\n            const timeoutId = setTimeout(() => {\n              console.log('开始执行AI移动，当前状态:', {\n                当前回合: nextTurn,\n                玩家颜色: playerColor\n              });\n              // 直接使用新棋盘而不是state中的board，避免闭包问题\n              makeAIMove(newBoard);\n            }, 500);\n\n            // 保存timeout ID以便在需要时清除（如组件卸载时）\n            return () => clearTimeout(timeoutId);\n          } else {\n            console.log('下一回合是玩家的回合:', playerColor);\n          }\n        }\n      } catch (gameEndError) {\n        console.error('检查游戏结束时出错:', gameEndError);\n        // 即使检查游戏结束出错，也继续游戏\n        if (nextTurn !== playerColor) {\n          console.log('发生错误，仍然执行AI移动');\n          setTimeout(() => makeAIMove(newBoard), 500);\n        }\n      }\n    } catch (error) {\n      console.error('执行移动时出错:', error);\n    }\n  };\n\n  // AI执行移动\n  const makeAIMove = currentBoard => {\n    // 重要：确保使用最新的playerColor和currentTurn状态\n    const aiColor = playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n    try {\n      console.log('AI回合开始，AI颜色:', aiColor, '难度级别:', difficulty);\n      console.log('当前棋盘状态有效性:', Boolean(currentBoard && Array.isArray(currentBoard) && currentBoard.length === 10));\n\n      // 验证棋盘数据是否有效\n      if (!currentBoard || !Array.isArray(currentBoard) || currentBoard.length !== 10) {\n        console.error('无效的棋盘数据传递给AI:', currentBoard);\n        // 尝试使用state中的棋盘\n        if (board && Array.isArray(board) && board.length === 10) {\n          console.log('使用state中的棋盘作为后备');\n          currentBoard = JSON.parse(JSON.stringify(board));\n        } else {\n          return; // 无有效棋盘，无法继续\n        }\n      }\n\n      // 使用本地变量保存当前回合，避免闭包问题\n      const actualCurrentTurn = currentTurn;\n      console.log('AI移动时的当前回合:', actualCurrentTurn, 'AI颜色:', aiColor);\n\n      // 确保当前回合是AI的回合\n      if (actualCurrentTurn !== aiColor) {\n        console.error('当前不是AI的回合，无法执行AI移动, 当前回合:', actualCurrentTurn, 'AI颜色:', aiColor);\n        // 如果回合不匹配，尝试强制设置回合\n        console.log('尝试纠正回合...');\n        setCurrentTurn(aiColor);\n        return; // 先返回，让回合状态更新后再尝试\n      }\n      console.log('AI正在计算最佳移动...');\n      // 添加更多的错误处理和调试信息\n      try {\n        const move = getBestMove(currentBoard, aiColor, difficulty);\n        console.log('AI计算结果:', move);\n        if (move) {\n          console.log('AI执行移动:', move);\n          const {\n            fromRow,\n            fromCol,\n            toRow,\n            toCol\n          } = move;\n\n          // 直接在本地验证移动是否有效，防止无效移动\n          const piece = currentBoard[fromRow][fromCol];\n          if (!piece || piece.color !== aiColor) {\n            console.error('AI选择了无效的棋子:', piece, 'AI颜色:', aiColor);\n            throw new Error('AI选择了无效的棋子');\n          }\n          if (!isValidMove(piece, currentBoard, fromRow, fromCol, toRow, toCol)) {\n            console.error('AI尝试执行无效移动');\n            throw new Error('AI尝试执行无效移动');\n          }\n          makeMove(fromRow, fromCol, toRow, toCol);\n        } else {\n          // AI无法找到合法移动，可能被将军\n          console.log('AI无法找到合法移动');\n\n          // 检查游戏是否结束\n          try {\n            const {\n              isGameOver,\n              winner\n            } = checkGameEnd(currentBoard, playerColor);\n            console.log('游戏结束检查:', isGameOver, winner);\n            if (isGameOver) {\n              setGameStatus('over');\n              setWinner(winner);\n            }\n          } catch (gameEndError) {\n            console.error('检查游戏结束时出错:', gameEndError);\n          }\n        }\n      } catch (aiError) {\n        console.error('调用getBestMove出错:', aiError);\n\n        // 尝试回退到随机移动作为备用方案\n        try {\n          console.log('尝试进行随机移动...');\n          const moves = [];\n\n          // 收集AI所有可能的有效移动\n          for (let fromRow = 0; fromRow < 10; fromRow++) {\n            for (let fromCol = 0; fromCol < 9; fromCol++) {\n              const piece = currentBoard[fromRow][fromCol];\n              if (piece && piece.color === aiColor) {\n                for (let toRow = 0; toRow < 10; toRow++) {\n                  for (let toCol = 0; toCol < 9; toCol++) {\n                    if (isValidMove(piece, currentBoard, fromRow, fromCol, toRow, toCol)) {\n                      // 检查移动后是否会导致自己被将军\n                      const tempBoard = JSON.parse(JSON.stringify(currentBoard));\n                      tempBoard[toRow][toCol] = tempBoard[fromRow][fromCol];\n                      tempBoard[fromRow][fromCol] = null;\n                      if (!isCheck(tempBoard, aiColor)) {\n                        moves.push({\n                          fromRow,\n                          fromCol,\n                          toRow,\n                          toCol\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          console.log('找到随机移动数量:', moves.length);\n          if (moves.length > 0) {\n            const randomMove = moves[Math.floor(Math.random() * moves.length)];\n            console.log('执行随机移动:', randomMove);\n            makeMove(randomMove.fromRow, randomMove.fromCol, randomMove.toRow, randomMove.toCol);\n          } else {\n            console.log('找不到任何合法移动，游戏可能已结束');\n            setGameStatus('over');\n            setWinner(playerColor);\n          }\n        } catch (randomMoveError) {\n          console.error('尝试随机移动失败:', randomMoveError);\n        }\n      }\n    } catch (error) {\n      console.error('AI移动出错:', error);\n    }\n  };\n\n  // 悔棋\n  const handleUndo = () => {\n    if (moveHistory.length < 2 || gameStatus !== 'playing') return;\n\n    // 需要撤销两步（玩家和AI的移动）\n    const previousState = moveHistory[moveHistory.length - 2];\n    setBoard(previousState.board);\n    setMoveHistory(moveHistory.slice(0, -2));\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(playerColor);\n    setIsCheckState(false);\n  };\n\n  // 切换玩家颜色\n  const togglePlayerColor = () => {\n    setPlayerColor(playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED);\n  };\n\n  // 修改AI难度\n  const changeDifficulty = newDifficulty => {\n    setDifficulty(newDifficulty);\n  };\n\n  // 返回主页\n  const goToHome = () => {\n    navigate('/');\n  };\n  if (!board) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u52A0\\u8F7D\\u4E2D...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 533,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u4EBA\\u673A\\u5BF9\\u6218\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u5F53\\u524D\\u56DE\\u5408: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: currentTurn === COLORS.RED ? 'red-text' : 'black-text',\n            children: currentTurn === COLORS.RED ? '红方' : '黑方'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), isCheckState && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"check-warning\",\n          children: \"\\u5C06\\u519B\\uFF01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 28\n        }, this), gameStatus === 'over' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-result\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6E38\\u620F\\u7ED3\\u675F\\uFF01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [winner === COLORS.RED ? '红方' : '黑方', \"\\u83B7\\u80DC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"difficulty-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"AI\\u96BE\\u5EA6\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: difficulty,\n            onChange: e => changeDifficulty(Number(e.target.value)),\n            disabled: gameStatus === 'playing' && moveHistory.length > 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: 1,\n              children: \"\\u7B80\\u5355\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 2,\n              children: \"\\u4E2D\\u7B49\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 3,\n              children: \"\\u56F0\\u96BE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 4,\n              children: \"\\u4E13\\u5BB6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 5,\n              children: \"\\u5927\\u5E08\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u6267\\u5B50\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: playerColor,\n            onChange: () => togglePlayerColor(),\n            disabled: gameStatus === 'playing' && moveHistory.length > 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: COLORS.RED,\n              children: \"\\u7EA2\\u65B9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: COLORS.BLACK,\n              children: \"\\u9ED1\\u65B9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn secondary-btn\",\n          onClick: handleUndo,\n          disabled: moveHistory.length < 2 || gameStatus !== 'playing',\n          children: \"\\u6094\\u68CB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn primary-btn\",\n          onClick: resetGame,\n          children: \"\\u91CD\\u65B0\\u5F00\\u59CB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn secondary-btn\",\n          onClick: goToHome,\n          children: \"\\u8FD4\\u56DE\\u4E3B\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(ChessBoard, {\n        board: board,\n        selectedCell: selectedCell,\n        validMoves: validMoves,\n        onCellClick: handleCellClick,\n        reversed: playerColor === COLORS.BLACK\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 536,\n    columnNumber: 5\n  }, this);\n};\n_s(AIGame, \"MEt3Jq8hbiI6RFA4S5UIC4mRvyE=\", false, function () {\n  return [useNavigate];\n});\n_c = AIGame;\nexport default AIGame;\nvar _c;\n$RefreshReg$(_c, \"AIGame\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","initializeBoard","isValidMove","isCheck","checkGameEnd","COLORS","getBestMove","ChessBoard","jsxDEV","_jsxDEV","AIGame","_s","board","setBoard","selectedCell","setSelectedCell","validMoves","setValidMoves","currentTurn","setCurrentTurn","RED","gameStatus","setGameStatus","winner","setWinner","isCheckState","setIsCheckState","difficulty","setDifficulty","playerColor","setPlayerColor","moveHistory","setMoveHistory","navigate","console","log","resetGame","newBoard","BLACK","setTimeout","executeAIFirstMove","boardCopy","JSON","parse","stringify","move","fromRow","fromCol","toRow","toCol","makeMove","error","isPlayerTurn","handleCellClick","row","col","clickedPiece","selectedRow","selectedCol","selectedPiece","isValid","some","color","selectPiece","piece","newValidMoves","push","checkError","moveError","length","historyEntry","captured","prev","nextTurn","isInCheck","gameEndResult","isGameOver","timeoutId","当前回合","玩家颜色","makeAIMove","clearTimeout","gameEndError","currentBoard","aiColor","Boolean","Array","isArray","actualCurrentTurn","Error","aiError","moves","tempBoard","randomMove","Math","floor","random","randomMoveError","handleUndo","previousState","slice","togglePlayerColor","changeDifficulty","newDifficulty","goToHome","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","e","Number","target","disabled","onClick","onCellClick","reversed","_c","$RefreshReg$"],"sources":["/Users/peng/Desktop/人工智能策略/chinese-chess-game/client/src/pages/AIGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  initializeBoard, \n  isValidMove, \n  isCheck, \n  checkGameEnd, \n  COLORS \n} from '../utils/chessRules';\nimport { getBestMove } from '../utils/chessAI';\nimport ChessBoard from '../components/ChessBoard';\nimport './Game.css';\n\nconst AIGame = () => {\n  const [board, setBoard] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(COLORS.RED); // 红方先行\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [winner, setWinner] = useState(null);\n  const [isCheckState, setIsCheckState] = useState(false);\n  const [difficulty, setDifficulty] = useState(3); // 默认难度级别为3\n  const [playerColor, setPlayerColor] = useState(COLORS.RED); // 默认玩家执红\n  const [moveHistory, setMoveHistory] = useState([]);\n  \n  const navigate = useNavigate();\n\n  // 初始化棋盘\n  useEffect(() => {\n    console.log('初始化棋盘useEffect触发, 玩家颜色:', playerColor);\n    resetGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playerColor]);\n\n  // 调试当前回合和玩家颜色的变化\n  useEffect(() => {\n    console.log('回合/玩家颜色状态更新 - 当前回合:', currentTurn, '玩家颜色:', playerColor, '是否为玩家回合:', currentTurn === playerColor);\n  }, [currentTurn, playerColor]);\n\n  // 重置游戏\n  const resetGame = () => {\n    console.log('重置游戏，玩家颜色:', playerColor);\n    const newBoard = initializeBoard();\n    console.log('初始化新棋盘');\n    \n    // 重置所有状态\n    setBoard(newBoard);\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(COLORS.RED);  // 红方永远先行\n    setGameStatus('playing');\n    setWinner(null);\n    setIsCheckState(false);\n    setMoveHistory([]);\n    \n    console.log('游戏状态重置完成');\n    \n    // 如果AI是红方且先行，立即执行AI移动\n    if (playerColor === COLORS.BLACK) {\n      console.log('AI执红先行，准备AI移动');\n      // 使用更长的延迟确保状态已经完全更新\n      setTimeout(() => {\n        // 重要：直接检查玩家颜色和当前回合\n        console.log('准备AI首步，检查状态 - 玩家颜色:', playerColor, '当前回合:', COLORS.RED);\n        \n        if (playerColor === COLORS.BLACK) {\n          console.log('确认执行AI首步移动');\n          \n          // 创建确保状态为最新的函数\n          const executeAIFirstMove = () => {\n            // 创建一个静态复制的棋盘，不依赖于可能变化的状态\n            const boardCopy = JSON.parse(JSON.stringify(newBoard));\n            \n            // 强制设置正确的状态条件\n            setCurrentTurn(COLORS.RED);  // 确保当前回合为红方\n            \n            // 使用另一个延迟确保状态已更新\n            setTimeout(() => {\n              console.log('执行AI首步移动，使用静态棋盘复制');\n              try {\n                // 直接调用AI移动逻辑\n                const move = getBestMove(boardCopy, COLORS.RED, difficulty);\n                if (move) {\n                  const { fromRow, fromCol, toRow, toCol } = move;\n                  console.log('AI首步移动:', move);\n                  makeMove(fromRow, fromCol, toRow, toCol);\n                } else {\n                  console.error('AI无法计算首步移动');\n                }\n              } catch (error) {\n                console.error('AI首步计算出错:', error);\n              }\n            }, 300);\n          };\n          \n          // 执行AI首步移动\n          executeAIFirstMove();\n        } else {\n          console.log('状态不匹配，AI不执行首步移动');\n        }\n      }, 500);\n    } else {\n      console.log('玩家执红先行');\n    }\n  };\n\n  // 当前是否轮到玩家行动\n  const isPlayerTurn = currentTurn === playerColor;\n\n  // 格子点击处理\n  const handleCellClick = (row, col) => {\n    try {\n      console.log('点击格子:', row, col, '当前回合:', currentTurn, '是否玩家回合:', isPlayerTurn);\n      \n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的格子坐标:', row, col);\n        return;\n      }\n      \n      // 游戏结束或非玩家回合时不允许操作\n      if (gameStatus !== 'playing' || !isPlayerTurn) {\n        if (gameStatus !== 'playing') {\n          console.log('游戏已结束，无法移动');\n        } else {\n          console.log('当前不是您的回合，玩家颜色:', playerColor, '当前回合:', currentTurn);\n        }\n        return;\n      }\n      \n      const clickedPiece = board[row][col];\n      console.log('点击的棋子:', clickedPiece);\n      \n      // 如果已选中棋子，尝试移动\n      if (selectedCell) {\n        const { row: selectedRow, col: selectedCol } = selectedCell;\n        console.log('当前已选中棋子:', selectedRow, selectedCol);\n        \n        // 验证选中的格子是否有效\n        if (selectedRow < 0 || selectedRow >= 10 || selectedCol < 0 || selectedCol >= 9) {\n          console.error('无效的已选中格子:', selectedCell);\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n        \n        const selectedPiece = board[selectedRow][selectedCol];\n        console.log('已选中的棋子:', selectedPiece);\n        \n        // 点击同一个棋子，取消选择\n        if (selectedRow === row && selectedCol === col) {\n          console.log('取消选择当前棋子');\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n        \n        // 检查是否是有效移动\n        const isValid = validMoves.some(move => move.row === row && move.col === col);\n        console.log('是否有效移动:', isValid, '有效移动列表:', validMoves);\n        \n        if (\n          selectedPiece && \n          selectedPiece.color === currentTurn &&\n          isValid\n        ) {\n          console.log('执行有效移动');\n          // 执行移动\n          makeMove(selectedRow, selectedCol, row, col);\n        } else if (clickedPiece && clickedPiece.color === currentTurn) {\n          console.log('选择新的己方棋子');\n          // 选择新的己方棋子\n          selectPiece(row, col);\n        } else {\n          console.log('无效点击，取消选择');\n          // 无效点击，取消选择\n          setSelectedCell(null);\n          setValidMoves([]);\n        }\n      } \n      // 如果未选中棋子，选择一个棋子\n      else if (clickedPiece && clickedPiece.color === currentTurn) {\n        console.log('选择己方棋子');\n        selectPiece(row, col);\n      } else if (clickedPiece) {\n        console.log('不能选择对方的棋子');\n      } else {\n        console.log('此处没有棋子');\n      }\n    } catch (error) {\n      console.error('点击处理出错:', error);\n      // 重置选择状态\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 选择棋子，计算有效移动\n  const selectPiece = (row, col) => {\n    try {\n      console.log('选择棋子:', row, col);\n      \n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的棋子坐标:', row, col);\n        return;\n      }\n      \n      // 验证有棋子\n      const piece = board[row][col];\n      if (!piece) {\n        console.error('该位置没有棋子:', row, col);\n        return;\n      }\n      \n      // 验证是当前回合的棋子\n      if (piece.color !== currentTurn) {\n        console.error('不是当前回合的棋子:', piece, '当前回合:', currentTurn);\n        return;\n      }\n      \n      setSelectedCell({ row, col });\n      console.log('已选中棋子:', { row, col }, piece);\n      \n      // 计算有效移动\n      const newValidMoves = [];\n      \n      for (let toRow = 0; toRow < 10; toRow++) {\n        for (let toCol = 0; toCol < 9; toCol++) {\n          try {\n            if (isValidMove(piece, board, row, col, toRow, toCol)) {\n              // 模拟移动，检查是否会导致自己被将军\n              try {\n                const newBoard = JSON.parse(JSON.stringify(board));\n                newBoard[toRow][toCol] = newBoard[row][col];\n                newBoard[row][col] = null;\n                \n                if (!isCheck(newBoard, piece.color)) {\n                  newValidMoves.push({ row: toRow, col: toCol });\n                }\n              } catch (checkError) {\n                console.error('检查将军状态时出错:', checkError, toRow, toCol);\n                // 跳过这个移动\n                continue;\n              }\n            }\n          } catch (moveError) {\n            console.error('检查有效移动时出错:', moveError, toRow, toCol);\n            // 跳过这个移动\n            continue;\n          }\n        }\n      }\n      \n      console.log('计算有效移动数量:', newValidMoves.length, newValidMoves);\n      \n      // 如果没有有效移动，提示用户\n      if (newValidMoves.length === 0) {\n        console.log('没有有效移动可用');\n      }\n      \n      setValidMoves(newValidMoves);\n    } catch (error) {\n      console.error('选择棋子出错:', error);\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 执行移动\n  const makeMove = (fromRow, fromCol, toRow, toCol) => {\n    try {\n      console.log('执行移动:', fromRow, fromCol, toRow, toCol, '当前回合:', currentTurn);\n      \n      // 验证坐标\n      if (\n        fromRow < 0 || fromRow >= 10 || fromCol < 0 || fromCol >= 9 ||\n        toRow < 0 || toRow >= 10 || toCol < 0 || toCol >= 9\n      ) {\n        console.error('无效的移动坐标:', fromRow, fromCol, toRow, toCol);\n        return;\n      }\n      \n      // 验证起始位置有棋子\n      if (!board[fromRow] || !board[fromRow][fromCol]) {\n        console.error('起始位置没有棋子:', fromRow, fromCol);\n        return;\n      }\n      \n      // 验证是当前回合的棋子\n      const piece = board[fromRow][fromCol];\n      if (!piece || piece.color !== currentTurn) {\n        console.error('不是当前回合的棋子:', piece, '当前回合:', currentTurn);\n        return;\n      }\n      \n      // 创建新棋盘（深拷贝）\n      const newBoard = JSON.parse(JSON.stringify(board));\n      \n      // 记录移动历史\n      const historyEntry = {\n        fromRow,\n        fromCol,\n        toRow,\n        toCol,\n        piece: board[fromRow][fromCol],\n        captured: board[toRow][toCol],\n        board: JSON.parse(JSON.stringify(board))\n      };\n      console.log('记录移动历史:', historyEntry);\n      setMoveHistory(prev => [...prev, historyEntry]);\n      \n      // 执行移动\n      newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n      newBoard[fromRow][fromCol] = null;\n      \n      // 更新棋盘状态\n      console.log('更新棋盘状态');\n      setBoard(newBoard);\n      setSelectedCell(null);\n      setValidMoves([]);\n      \n      // 切换回合\n      const nextTurn = currentTurn === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n      console.log('切换回合:', currentTurn, '->', nextTurn);\n      setCurrentTurn(nextTurn);\n      \n      // 检查是否将军\n      try {\n        const isInCheck = isCheck(newBoard, nextTurn);\n        console.log('是否将军:', isInCheck, '下一回合:', nextTurn);\n        setIsCheckState(isInCheck);\n      } catch (checkError) {\n        console.error('检查是否将军时出错:', checkError);\n      }\n      \n      // 检查游戏是否结束\n      try {\n        const gameEndResult = checkGameEnd(newBoard, currentTurn);\n        console.log('游戏是否结束:', gameEndResult);\n        \n        if (gameEndResult.isGameOver) {\n          console.log('游戏结束，胜者:', gameEndResult.winner);\n          setGameStatus('over');\n          setWinner(gameEndResult.winner);\n          return; // 游戏结束，不再执行AI移动\n        } else {\n          // 如果下一回合是AI的回合，让AI行动\n          if (nextTurn !== playerColor) {\n            console.log('准备执行AI移动，延迟500ms');\n            // 使用timeout而不是直接调用，确保状态更新后再执行AI移动\n            const timeoutId = setTimeout(() => {\n              console.log('开始执行AI移动，当前状态:', {\n                当前回合: nextTurn,\n                玩家颜色: playerColor\n              });\n              // 直接使用新棋盘而不是state中的board，避免闭包问题\n              makeAIMove(newBoard);\n            }, 500);\n            \n            // 保存timeout ID以便在需要时清除（如组件卸载时）\n            return () => clearTimeout(timeoutId);\n          } else {\n            console.log('下一回合是玩家的回合:', playerColor);\n          }\n        }\n      } catch (gameEndError) {\n        console.error('检查游戏结束时出错:', gameEndError);\n        // 即使检查游戏结束出错，也继续游戏\n        if (nextTurn !== playerColor) {\n          console.log('发生错误，仍然执行AI移动');\n          setTimeout(() => makeAIMove(newBoard), 500);\n        }\n      }\n    } catch (error) {\n      console.error('执行移动时出错:', error);\n    }\n  };\n\n  // AI执行移动\n  const makeAIMove = (currentBoard) => {\n    // 重要：确保使用最新的playerColor和currentTurn状态\n    const aiColor = playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n    \n    try {\n      console.log('AI回合开始，AI颜色:', aiColor, '难度级别:', difficulty);\n      console.log('当前棋盘状态有效性:', Boolean(currentBoard && Array.isArray(currentBoard) && currentBoard.length === 10));\n      \n      // 验证棋盘数据是否有效\n      if (!currentBoard || !Array.isArray(currentBoard) || currentBoard.length !== 10) {\n        console.error('无效的棋盘数据传递给AI:', currentBoard);\n        // 尝试使用state中的棋盘\n        if (board && Array.isArray(board) && board.length === 10) {\n          console.log('使用state中的棋盘作为后备');\n          currentBoard = JSON.parse(JSON.stringify(board));\n        } else {\n          return; // 无有效棋盘，无法继续\n        }\n      }\n      \n      // 使用本地变量保存当前回合，避免闭包问题\n      const actualCurrentTurn = currentTurn;\n      console.log('AI移动时的当前回合:', actualCurrentTurn, 'AI颜色:', aiColor);\n      \n      // 确保当前回合是AI的回合\n      if (actualCurrentTurn !== aiColor) {\n        console.error('当前不是AI的回合，无法执行AI移动, 当前回合:', actualCurrentTurn, 'AI颜色:', aiColor);\n        // 如果回合不匹配，尝试强制设置回合\n        console.log('尝试纠正回合...');\n        setCurrentTurn(aiColor);\n        return; // 先返回，让回合状态更新后再尝试\n      }\n      \n      console.log('AI正在计算最佳移动...');\n      // 添加更多的错误处理和调试信息\n      try {\n        const move = getBestMove(currentBoard, aiColor, difficulty);\n        console.log('AI计算结果:', move);\n        \n        if (move) {\n          console.log('AI执行移动:', move);\n          const { fromRow, fromCol, toRow, toCol } = move;\n          \n          // 直接在本地验证移动是否有效，防止无效移动\n          const piece = currentBoard[fromRow][fromCol];\n          if (!piece || piece.color !== aiColor) {\n            console.error('AI选择了无效的棋子:', piece, 'AI颜色:', aiColor);\n            throw new Error('AI选择了无效的棋子');\n          }\n          \n          if (!isValidMove(piece, currentBoard, fromRow, fromCol, toRow, toCol)) {\n            console.error('AI尝试执行无效移动');\n            throw new Error('AI尝试执行无效移动');\n          }\n          \n          makeMove(fromRow, fromCol, toRow, toCol);\n        } else {\n          // AI无法找到合法移动，可能被将军\n          console.log('AI无法找到合法移动');\n          \n          // 检查游戏是否结束\n          try {\n            const { isGameOver, winner } = checkGameEnd(currentBoard, playerColor);\n            console.log('游戏结束检查:', isGameOver, winner);\n            if (isGameOver) {\n              setGameStatus('over');\n              setWinner(winner);\n            }\n          } catch (gameEndError) {\n            console.error('检查游戏结束时出错:', gameEndError);\n          }\n        }\n      } catch (aiError) {\n        console.error('调用getBestMove出错:', aiError);\n        \n        // 尝试回退到随机移动作为备用方案\n        try {\n          console.log('尝试进行随机移动...');\n          const moves = [];\n          \n          // 收集AI所有可能的有效移动\n          for (let fromRow = 0; fromRow < 10; fromRow++) {\n            for (let fromCol = 0; fromCol < 9; fromCol++) {\n              const piece = currentBoard[fromRow][fromCol];\n              if (piece && piece.color === aiColor) {\n                for (let toRow = 0; toRow < 10; toRow++) {\n                  for (let toCol = 0; toCol < 9; toCol++) {\n                    if (isValidMove(piece, currentBoard, fromRow, fromCol, toRow, toCol)) {\n                      // 检查移动后是否会导致自己被将军\n                      const tempBoard = JSON.parse(JSON.stringify(currentBoard));\n                      tempBoard[toRow][toCol] = tempBoard[fromRow][fromCol];\n                      tempBoard[fromRow][fromCol] = null;\n                      \n                      if (!isCheck(tempBoard, aiColor)) {\n                        moves.push({ fromRow, fromCol, toRow, toCol });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          \n          console.log('找到随机移动数量:', moves.length);\n          \n          if (moves.length > 0) {\n            const randomMove = moves[Math.floor(Math.random() * moves.length)];\n            console.log('执行随机移动:', randomMove);\n            makeMove(randomMove.fromRow, randomMove.fromCol, randomMove.toRow, randomMove.toCol);\n          } else {\n            console.log('找不到任何合法移动，游戏可能已结束');\n            setGameStatus('over');\n            setWinner(playerColor);\n          }\n        } catch (randomMoveError) {\n          console.error('尝试随机移动失败:', randomMoveError);\n        }\n      }\n    } catch (error) {\n      console.error('AI移动出错:', error);\n    }\n  };\n\n  // 悔棋\n  const handleUndo = () => {\n    if (moveHistory.length < 2 || gameStatus !== 'playing') return;\n    \n    // 需要撤销两步（玩家和AI的移动）\n    const previousState = moveHistory[moveHistory.length - 2];\n    setBoard(previousState.board);\n    setMoveHistory(moveHistory.slice(0, -2));\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(playerColor);\n    setIsCheckState(false);\n  };\n\n  // 切换玩家颜色\n  const togglePlayerColor = () => {\n    setPlayerColor(playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED);\n  };\n\n  // 修改AI难度\n  const changeDifficulty = (newDifficulty) => {\n    setDifficulty(newDifficulty);\n  };\n\n  // 返回主页\n  const goToHome = () => {\n    navigate('/');\n  };\n\n  if (!board) return <div>加载中...</div>;\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-info\">\n        <h1>人机对战</h1>\n        <div className=\"status-panel\">\n          <p>当前回合: <span className={currentTurn === COLORS.RED ? 'red-text' : 'black-text'}>\n            {currentTurn === COLORS.RED ? '红方' : '黑方'}\n          </span></p>\n          {isCheckState && <p className=\"check-warning\">将军！</p>}\n          {gameStatus === 'over' && (\n            <div className=\"game-result\">\n              <p>游戏结束！</p>\n              <p>{winner === COLORS.RED ? '红方' : '黑方'}获胜</p>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"control-panel\">\n          <div className=\"difficulty-control\">\n            <label>AI难度：</label>\n            <select \n              value={difficulty} \n              onChange={(e) => changeDifficulty(Number(e.target.value))}\n              disabled={gameStatus === 'playing' && moveHistory.length > 0}\n            >\n              <option value={1}>简单</option>\n              <option value={2}>中等</option>\n              <option value={3}>困难</option>\n              <option value={4}>专家</option>\n              <option value={5}>大师</option>\n            </select>\n          </div>\n          \n          <div className=\"color-control\">\n            <label>执子：</label>\n            <select \n              value={playerColor} \n              onChange={() => togglePlayerColor()}\n              disabled={gameStatus === 'playing' && moveHistory.length > 0}\n            >\n              <option value={COLORS.RED}>红方</option>\n              <option value={COLORS.BLACK}>黑方</option>\n            </select>\n          </div>\n          \n          <button \n            className=\"btn secondary-btn\" \n            onClick={handleUndo}\n            disabled={moveHistory.length < 2 || gameStatus !== 'playing'}\n          >\n            悔棋\n          </button>\n          \n          <button \n            className=\"btn primary-btn\" \n            onClick={resetGame}\n          >\n            重新开始\n          </button>\n          \n          <button \n            className=\"btn secondary-btn\" \n            onClick={goToHome}\n          >\n            返回主页\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"board-container\">\n        <ChessBoard \n          board={board}\n          selectedCell={selectedCell}\n          validMoves={validMoves}\n          onCellClick={handleCellClick}\n          reversed={playerColor === COLORS.BLACK}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AIGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,eAAe,EACfC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZC,MAAM,QACD,qBAAqB;AAC5B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAACO,MAAM,CAACe,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,SAAS,CAAC;EACvD,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAACO,MAAM,CAACe,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMmC,QAAQ,GAAGjC,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACdmC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEN,WAAW,CAAC;IACnDO,SAAS,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;;EAEjB;EACA9B,SAAS,CAAC,MAAM;IACdmC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEjB,WAAW,EAAE,OAAO,EAAEW,WAAW,EAAE,UAAU,EAAEX,WAAW,KAAKW,WAAW,CAAC;EAChH,CAAC,EAAE,CAACX,WAAW,EAAEW,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,WAAW,CAAC;IACtC,MAAMQ,QAAQ,GAAGpC,eAAe,CAAC,CAAC;IAClCiC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;;IAErB;IACAtB,QAAQ,CAACwB,QAAQ,CAAC;IAClBtB,eAAe,CAAC,IAAI,CAAC;IACrBE,aAAa,CAAC,EAAE,CAAC;IACjBE,cAAc,CAACd,MAAM,CAACe,GAAG,CAAC,CAAC,CAAE;IAC7BE,aAAa,CAAC,SAAS,CAAC;IACxBE,SAAS,CAAC,IAAI,CAAC;IACfE,eAAe,CAAC,KAAK,CAAC;IACtBM,cAAc,CAAC,EAAE,CAAC;IAElBE,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;;IAEvB;IACA,IAAIN,WAAW,KAAKxB,MAAM,CAACiC,KAAK,EAAE;MAChCJ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B;MACAI,UAAU,CAAC,MAAM;QACf;QACAL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,WAAW,EAAE,OAAO,EAAExB,MAAM,CAACe,GAAG,CAAC;QAEpE,IAAIS,WAAW,KAAKxB,MAAM,CAACiC,KAAK,EAAE;UAChCJ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;UAEzB;UACA,MAAMK,kBAAkB,GAAGA,CAAA,KAAM;YAC/B;YACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACP,QAAQ,CAAC,CAAC;;YAEtD;YACAlB,cAAc,CAACd,MAAM,CAACe,GAAG,CAAC,CAAC,CAAE;;YAE7B;YACAmB,UAAU,CAAC,MAAM;cACfL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;cAChC,IAAI;gBACF;gBACA,MAAMU,IAAI,GAAGvC,WAAW,CAACmC,SAAS,EAAEpC,MAAM,CAACe,GAAG,EAAEO,UAAU,CAAC;gBAC3D,IAAIkB,IAAI,EAAE;kBACR,MAAM;oBAAEC,OAAO;oBAAEC,OAAO;oBAAEC,KAAK;oBAAEC;kBAAM,CAAC,GAAGJ,IAAI;kBAC/CX,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEU,IAAI,CAAC;kBAC5BK,QAAQ,CAACJ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;gBAC1C,CAAC,MAAM;kBACLf,OAAO,CAACiB,KAAK,CAAC,YAAY,CAAC;gBAC7B;cACF,CAAC,CAAC,OAAOA,KAAK,EAAE;gBACdjB,OAAO,CAACiB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;cACnC;YACF,CAAC,EAAE,GAAG,CAAC;UACT,CAAC;;UAED;UACAX,kBAAkB,CAAC,CAAC;QACtB,CAAC,MAAM;UACLN,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAChC;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAMiB,YAAY,GAAGlC,WAAW,KAAKW,WAAW;;EAEhD;EACA,MAAMwB,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACpC,IAAI;MACFrB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEmB,GAAG,EAAEC,GAAG,EAAE,OAAO,EAAErC,WAAW,EAAE,SAAS,EAAEkC,YAAY,CAAC;;MAE7E;MACA,IAAIE,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,EAAE,IAAIC,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,CAAC,EAAE;QAC/CrB,OAAO,CAACiB,KAAK,CAAC,UAAU,EAAEG,GAAG,EAAEC,GAAG,CAAC;QACnC;MACF;;MAEA;MACA,IAAIlC,UAAU,KAAK,SAAS,IAAI,CAAC+B,YAAY,EAAE;QAC7C,IAAI/B,UAAU,KAAK,SAAS,EAAE;UAC5Ba,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QAC3B,CAAC,MAAM;UACLD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,WAAW,EAAE,OAAO,EAAEX,WAAW,CAAC;QAClE;QACA;MACF;MAEA,MAAMsC,YAAY,GAAG5C,KAAK,CAAC0C,GAAG,CAAC,CAACC,GAAG,CAAC;MACpCrB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEqB,YAAY,CAAC;;MAEnC;MACA,IAAI1C,YAAY,EAAE;QAChB,MAAM;UAAEwC,GAAG,EAAEG,WAAW;UAAEF,GAAG,EAAEG;QAAY,CAAC,GAAG5C,YAAY;QAC3DoB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEsB,WAAW,EAAEC,WAAW,CAAC;;QAEjD;QACA,IAAID,WAAW,GAAG,CAAC,IAAIA,WAAW,IAAI,EAAE,IAAIC,WAAW,GAAG,CAAC,IAAIA,WAAW,IAAI,CAAC,EAAE;UAC/ExB,OAAO,CAACiB,KAAK,CAAC,WAAW,EAAErC,YAAY,CAAC;UACxCC,eAAe,CAAC,IAAI,CAAC;UACrBE,aAAa,CAAC,EAAE,CAAC;UACjB;QACF;QAEA,MAAM0C,aAAa,GAAG/C,KAAK,CAAC6C,WAAW,CAAC,CAACC,WAAW,CAAC;QACrDxB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEwB,aAAa,CAAC;;QAErC;QACA,IAAIF,WAAW,KAAKH,GAAG,IAAII,WAAW,KAAKH,GAAG,EAAE;UAC9CrB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;UACvBpB,eAAe,CAAC,IAAI,CAAC;UACrBE,aAAa,CAAC,EAAE,CAAC;UACjB;QACF;;QAEA;QACA,MAAM2C,OAAO,GAAG5C,UAAU,CAAC6C,IAAI,CAAChB,IAAI,IAAIA,IAAI,CAACS,GAAG,KAAKA,GAAG,IAAIT,IAAI,CAACU,GAAG,KAAKA,GAAG,CAAC;QAC7ErB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEyB,OAAO,EAAE,SAAS,EAAE5C,UAAU,CAAC;QAEtD,IACE2C,aAAa,IACbA,aAAa,CAACG,KAAK,KAAK5C,WAAW,IACnC0C,OAAO,EACP;UACA1B,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrB;UACAe,QAAQ,CAACO,WAAW,EAAEC,WAAW,EAAEJ,GAAG,EAAEC,GAAG,CAAC;QAC9C,CAAC,MAAM,IAAIC,YAAY,IAAIA,YAAY,CAACM,KAAK,KAAK5C,WAAW,EAAE;UAC7DgB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;UACvB;UACA4B,WAAW,CAACT,GAAG,EAAEC,GAAG,CAAC;QACvB,CAAC,MAAM;UACLrB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;UACxB;UACApB,eAAe,CAAC,IAAI,CAAC;UACrBE,aAAa,CAAC,EAAE,CAAC;QACnB;MACF;MACA;MAAA,KACK,IAAIuC,YAAY,IAAIA,YAAY,CAACM,KAAK,KAAK5C,WAAW,EAAE;QAC3DgB,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrB4B,WAAW,CAACT,GAAG,EAAEC,GAAG,CAAC;MACvB,CAAC,MAAM,IAAIC,YAAY,EAAE;QACvBtB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC1B,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACvB;IACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B;MACApC,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM8C,WAAW,GAAGA,CAACT,GAAG,EAAEC,GAAG,KAAK;IAChC,IAAI;MACFrB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEmB,GAAG,EAAEC,GAAG,CAAC;;MAE9B;MACA,IAAID,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,EAAE,IAAIC,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,CAAC,EAAE;QAC/CrB,OAAO,CAACiB,KAAK,CAAC,UAAU,EAAEG,GAAG,EAAEC,GAAG,CAAC;QACnC;MACF;;MAEA;MACA,MAAMS,KAAK,GAAGpD,KAAK,CAAC0C,GAAG,CAAC,CAACC,GAAG,CAAC;MAC7B,IAAI,CAACS,KAAK,EAAE;QACV9B,OAAO,CAACiB,KAAK,CAAC,UAAU,EAAEG,GAAG,EAAEC,GAAG,CAAC;QACnC;MACF;;MAEA;MACA,IAAIS,KAAK,CAACF,KAAK,KAAK5C,WAAW,EAAE;QAC/BgB,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEa,KAAK,EAAE,OAAO,EAAE9C,WAAW,CAAC;QACxD;MACF;MAEAH,eAAe,CAAC;QAAEuC,GAAG;QAAEC;MAAI,CAAC,CAAC;MAC7BrB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE;QAAEmB,GAAG;QAAEC;MAAI,CAAC,EAAES,KAAK,CAAC;;MAE1C;MACA,MAAMC,aAAa,GAAG,EAAE;MAExB,KAAK,IAAIjB,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,EAAE,EAAEA,KAAK,EAAE,EAAE;QACvC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,EAAE,EAAE;UACtC,IAAI;YACF,IAAI/C,WAAW,CAAC8D,KAAK,EAAEpD,KAAK,EAAE0C,GAAG,EAAEC,GAAG,EAAEP,KAAK,EAAEC,KAAK,CAAC,EAAE;cACrD;cACA,IAAI;gBACF,MAAMZ,QAAQ,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAChC,KAAK,CAAC,CAAC;gBAClDyB,QAAQ,CAACW,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGZ,QAAQ,CAACiB,GAAG,CAAC,CAACC,GAAG,CAAC;gBAC3ClB,QAAQ,CAACiB,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,IAAI;gBAEzB,IAAI,CAACpD,OAAO,CAACkC,QAAQ,EAAE2B,KAAK,CAACF,KAAK,CAAC,EAAE;kBACnCG,aAAa,CAACC,IAAI,CAAC;oBAAEZ,GAAG,EAAEN,KAAK;oBAAEO,GAAG,EAAEN;kBAAM,CAAC,CAAC;gBAChD;cACF,CAAC,CAAC,OAAOkB,UAAU,EAAE;gBACnBjC,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEgB,UAAU,EAAEnB,KAAK,EAAEC,KAAK,CAAC;gBACrD;gBACA;cACF;YACF;UACF,CAAC,CAAC,OAAOmB,SAAS,EAAE;YAClBlC,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEiB,SAAS,EAAEpB,KAAK,EAAEC,KAAK,CAAC;YACpD;YACA;UACF;QACF;MACF;MAEAf,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE8B,aAAa,CAACI,MAAM,EAAEJ,aAAa,CAAC;;MAE7D;MACA,IAAIA,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;QAC9BnC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACzB;MAEAlB,aAAa,CAACgD,aAAa,CAAC;IAC9B,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/BpC,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMiC,QAAQ,GAAGA,CAACJ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,KAAK;IACnD,IAAI;MACFf,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEW,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE,OAAO,EAAE/B,WAAW,CAAC;;MAE1E;MACA,IACE4B,OAAO,GAAG,CAAC,IAAIA,OAAO,IAAI,EAAE,IAAIC,OAAO,GAAG,CAAC,IAAIA,OAAO,IAAI,CAAC,IAC3DC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,EAAE,IAAIC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,CAAC,EACnD;QACAf,OAAO,CAACiB,KAAK,CAAC,UAAU,EAAEL,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;QACzD;MACF;;MAEA;MACA,IAAI,CAACrC,KAAK,CAACkC,OAAO,CAAC,IAAI,CAAClC,KAAK,CAACkC,OAAO,CAAC,CAACC,OAAO,CAAC,EAAE;QAC/Cb,OAAO,CAACiB,KAAK,CAAC,WAAW,EAAEL,OAAO,EAAEC,OAAO,CAAC;QAC5C;MACF;;MAEA;MACA,MAAMiB,KAAK,GAAGpD,KAAK,CAACkC,OAAO,CAAC,CAACC,OAAO,CAAC;MACrC,IAAI,CAACiB,KAAK,IAAIA,KAAK,CAACF,KAAK,KAAK5C,WAAW,EAAE;QACzCgB,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEa,KAAK,EAAE,OAAO,EAAE9C,WAAW,CAAC;QACxD;MACF;;MAEA;MACA,MAAMmB,QAAQ,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAChC,KAAK,CAAC,CAAC;;MAElD;MACA,MAAM0D,YAAY,GAAG;QACnBxB,OAAO;QACPC,OAAO;QACPC,KAAK;QACLC,KAAK;QACLe,KAAK,EAAEpD,KAAK,CAACkC,OAAO,CAAC,CAACC,OAAO,CAAC;QAC9BwB,QAAQ,EAAE3D,KAAK,CAACoC,KAAK,CAAC,CAACC,KAAK,CAAC;QAC7BrC,KAAK,EAAE8B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAChC,KAAK,CAAC;MACzC,CAAC;MACDsB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEmC,YAAY,CAAC;MACpCtC,cAAc,CAACwC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,YAAY,CAAC,CAAC;;MAE/C;MACAjC,QAAQ,CAACW,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGZ,QAAQ,CAACS,OAAO,CAAC,CAACC,OAAO,CAAC;MACnDV,QAAQ,CAACS,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,IAAI;;MAEjC;MACAb,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBtB,QAAQ,CAACwB,QAAQ,CAAC;MAClBtB,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;;MAEjB;MACA,MAAMwD,QAAQ,GAAGvD,WAAW,KAAKb,MAAM,CAACe,GAAG,GAAGf,MAAM,CAACiC,KAAK,GAAGjC,MAAM,CAACe,GAAG;MACvEc,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEjB,WAAW,EAAE,IAAI,EAAEuD,QAAQ,CAAC;MACjDtD,cAAc,CAACsD,QAAQ,CAAC;;MAExB;MACA,IAAI;QACF,MAAMC,SAAS,GAAGvE,OAAO,CAACkC,QAAQ,EAAEoC,QAAQ,CAAC;QAC7CvC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEuC,SAAS,EAAE,OAAO,EAAED,QAAQ,CAAC;QAClD/C,eAAe,CAACgD,SAAS,CAAC;MAC5B,CAAC,CAAC,OAAOP,UAAU,EAAE;QACnBjC,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEgB,UAAU,CAAC;MACzC;;MAEA;MACA,IAAI;QACF,MAAMQ,aAAa,GAAGvE,YAAY,CAACiC,QAAQ,EAAEnB,WAAW,CAAC;QACzDgB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEwC,aAAa,CAAC;QAErC,IAAIA,aAAa,CAACC,UAAU,EAAE;UAC5B1C,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEwC,aAAa,CAACpD,MAAM,CAAC;UAC7CD,aAAa,CAAC,MAAM,CAAC;UACrBE,SAAS,CAACmD,aAAa,CAACpD,MAAM,CAAC;UAC/B,OAAO,CAAC;QACV,CAAC,MAAM;UACL;UACA,IAAIkD,QAAQ,KAAK5C,WAAW,EAAE;YAC5BK,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;YAC/B;YACA,MAAM0C,SAAS,GAAGtC,UAAU,CAAC,MAAM;cACjCL,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;gBAC5B2C,IAAI,EAAEL,QAAQ;gBACdM,IAAI,EAAElD;cACR,CAAC,CAAC;cACF;cACAmD,UAAU,CAAC3C,QAAQ,CAAC;YACtB,CAAC,EAAE,GAAG,CAAC;;YAEP;YACA,OAAO,MAAM4C,YAAY,CAACJ,SAAS,CAAC;UACtC,CAAC,MAAM;YACL3C,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEN,WAAW,CAAC;UACzC;QACF;MACF,CAAC,CAAC,OAAOqD,YAAY,EAAE;QACrBhD,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAE+B,YAAY,CAAC;QACzC;QACA,IAAIT,QAAQ,KAAK5C,WAAW,EAAE;UAC5BK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;UAC5BI,UAAU,CAAC,MAAMyC,UAAU,CAAC3C,QAAQ,CAAC,EAAE,GAAG,CAAC;QAC7C;MACF;IACF,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAM6B,UAAU,GAAIG,YAAY,IAAK;IACnC;IACA,MAAMC,OAAO,GAAGvD,WAAW,KAAKxB,MAAM,CAACe,GAAG,GAAGf,MAAM,CAACiC,KAAK,GAAGjC,MAAM,CAACe,GAAG;IAEtE,IAAI;MACFc,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEiD,OAAO,EAAE,OAAO,EAAEzD,UAAU,CAAC;MACzDO,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEkD,OAAO,CAACF,YAAY,IAAIG,KAAK,CAACC,OAAO,CAACJ,YAAY,CAAC,IAAIA,YAAY,CAACd,MAAM,KAAK,EAAE,CAAC,CAAC;;MAE7G;MACA,IAAI,CAACc,YAAY,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,YAAY,CAAC,IAAIA,YAAY,CAACd,MAAM,KAAK,EAAE,EAAE;QAC/EnC,OAAO,CAACiB,KAAK,CAAC,eAAe,EAAEgC,YAAY,CAAC;QAC5C;QACA,IAAIvE,KAAK,IAAI0E,KAAK,CAACC,OAAO,CAAC3E,KAAK,CAAC,IAAIA,KAAK,CAACyD,MAAM,KAAK,EAAE,EAAE;UACxDnC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9BgD,YAAY,GAAGzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAChC,KAAK,CAAC,CAAC;QAClD,CAAC,MAAM;UACL,OAAO,CAAC;QACV;MACF;;MAEA;MACA,MAAM4E,iBAAiB,GAAGtE,WAAW;MACrCgB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEqD,iBAAiB,EAAE,OAAO,EAAEJ,OAAO,CAAC;;MAE/D;MACA,IAAII,iBAAiB,KAAKJ,OAAO,EAAE;QACjClD,OAAO,CAACiB,KAAK,CAAC,2BAA2B,EAAEqC,iBAAiB,EAAE,OAAO,EAAEJ,OAAO,CAAC;QAC/E;QACAlD,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBhB,cAAc,CAACiE,OAAO,CAAC;QACvB,OAAO,CAAC;MACV;MAEAlD,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B;MACA,IAAI;QACF,MAAMU,IAAI,GAAGvC,WAAW,CAAC6E,YAAY,EAAEC,OAAO,EAAEzD,UAAU,CAAC;QAC3DO,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEU,IAAI,CAAC;QAE5B,IAAIA,IAAI,EAAE;UACRX,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEU,IAAI,CAAC;UAC5B,MAAM;YAAEC,OAAO;YAAEC,OAAO;YAAEC,KAAK;YAAEC;UAAM,CAAC,GAAGJ,IAAI;;UAE/C;UACA,MAAMmB,KAAK,GAAGmB,YAAY,CAACrC,OAAO,CAAC,CAACC,OAAO,CAAC;UAC5C,IAAI,CAACiB,KAAK,IAAIA,KAAK,CAACF,KAAK,KAAKsB,OAAO,EAAE;YACrClD,OAAO,CAACiB,KAAK,CAAC,aAAa,EAAEa,KAAK,EAAE,OAAO,EAAEoB,OAAO,CAAC;YACrD,MAAM,IAAIK,KAAK,CAAC,YAAY,CAAC;UAC/B;UAEA,IAAI,CAACvF,WAAW,CAAC8D,KAAK,EAAEmB,YAAY,EAAErC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC,EAAE;YACrEf,OAAO,CAACiB,KAAK,CAAC,YAAY,CAAC;YAC3B,MAAM,IAAIsC,KAAK,CAAC,YAAY,CAAC;UAC/B;UAEAvC,QAAQ,CAACJ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;QAC1C,CAAC,MAAM;UACL;UACAf,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;UAEzB;UACA,IAAI;YACF,MAAM;cAAEyC,UAAU;cAAErD;YAAO,CAAC,GAAGnB,YAAY,CAAC+E,YAAY,EAAEtD,WAAW,CAAC;YACtEK,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEyC,UAAU,EAAErD,MAAM,CAAC;YAC1C,IAAIqD,UAAU,EAAE;cACdtD,aAAa,CAAC,MAAM,CAAC;cACrBE,SAAS,CAACD,MAAM,CAAC;YACnB;UACF,CAAC,CAAC,OAAO2D,YAAY,EAAE;YACrBhD,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAE+B,YAAY,CAAC;UAC3C;QACF;MACF,CAAC,CAAC,OAAOQ,OAAO,EAAE;QAChBxD,OAAO,CAACiB,KAAK,CAAC,kBAAkB,EAAEuC,OAAO,CAAC;;QAE1C;QACA,IAAI;UACFxD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B,MAAMwD,KAAK,GAAG,EAAE;;UAEhB;UACA,KAAK,IAAI7C,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,EAAE,EAAEA,OAAO,EAAE,EAAE;YAC7C,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,CAAC,EAAEA,OAAO,EAAE,EAAE;cAC5C,MAAMiB,KAAK,GAAGmB,YAAY,CAACrC,OAAO,CAAC,CAACC,OAAO,CAAC;cAC5C,IAAIiB,KAAK,IAAIA,KAAK,CAACF,KAAK,KAAKsB,OAAO,EAAE;gBACpC,KAAK,IAAIpC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,EAAE,EAAEA,KAAK,EAAE,EAAE;kBACvC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,EAAE,EAAE;oBACtC,IAAI/C,WAAW,CAAC8D,KAAK,EAAEmB,YAAY,EAAErC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC,EAAE;sBACpE;sBACA,MAAM2C,SAAS,GAAGlD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACuC,YAAY,CAAC,CAAC;sBAC1DS,SAAS,CAAC5C,KAAK,CAAC,CAACC,KAAK,CAAC,GAAG2C,SAAS,CAAC9C,OAAO,CAAC,CAACC,OAAO,CAAC;sBACrD6C,SAAS,CAAC9C,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,IAAI;sBAElC,IAAI,CAAC5C,OAAO,CAACyF,SAAS,EAAER,OAAO,CAAC,EAAE;wBAChCO,KAAK,CAACzB,IAAI,CAAC;0BAAEpB,OAAO;0BAAEC,OAAO;0BAAEC,KAAK;0BAAEC;wBAAM,CAAC,CAAC;sBAChD;oBACF;kBACF;gBACF;cACF;YACF;UACF;UAEAf,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEwD,KAAK,CAACtB,MAAM,CAAC;UAEtC,IAAIsB,KAAK,CAACtB,MAAM,GAAG,CAAC,EAAE;YACpB,MAAMwB,UAAU,GAAGF,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACtB,MAAM,CAAC,CAAC;YAClEnC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE0D,UAAU,CAAC;YAClC3C,QAAQ,CAAC2C,UAAU,CAAC/C,OAAO,EAAE+C,UAAU,CAAC9C,OAAO,EAAE8C,UAAU,CAAC7C,KAAK,EAAE6C,UAAU,CAAC5C,KAAK,CAAC;UACtF,CAAC,MAAM;YACLf,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;YAChCb,aAAa,CAAC,MAAM,CAAC;YACrBE,SAAS,CAACK,WAAW,CAAC;UACxB;QACF,CAAC,CAAC,OAAOoE,eAAe,EAAE;UACxB/D,OAAO,CAACiB,KAAK,CAAC,WAAW,EAAE8C,eAAe,CAAC;QAC7C;MACF;IACF,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAM+C,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAInE,WAAW,CAACsC,MAAM,GAAG,CAAC,IAAIhD,UAAU,KAAK,SAAS,EAAE;;IAExD;IACA,MAAM8E,aAAa,GAAGpE,WAAW,CAACA,WAAW,CAACsC,MAAM,GAAG,CAAC,CAAC;IACzDxD,QAAQ,CAACsF,aAAa,CAACvF,KAAK,CAAC;IAC7BoB,cAAc,CAACD,WAAW,CAACqE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxCrF,eAAe,CAAC,IAAI,CAAC;IACrBE,aAAa,CAAC,EAAE,CAAC;IACjBE,cAAc,CAACU,WAAW,CAAC;IAC3BH,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;;EAED;EACA,MAAM2E,iBAAiB,GAAGA,CAAA,KAAM;IAC9BvE,cAAc,CAACD,WAAW,KAAKxB,MAAM,CAACe,GAAG,GAAGf,MAAM,CAACiC,KAAK,GAAGjC,MAAM,CAACe,GAAG,CAAC;EACxE,CAAC;;EAED;EACA,MAAMkF,gBAAgB,GAAIC,aAAa,IAAK;IAC1C3E,aAAa,CAAC2E,aAAa,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrBvE,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,IAAI,CAACrB,KAAK,EAAE,oBAAOH,OAAA;IAAAgG,QAAA,EAAK;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEpC,oBACEpG,OAAA;IAAKqG,SAAS,EAAC,gBAAgB;IAAAL,QAAA,gBAC7BhG,OAAA;MAAKqG,SAAS,EAAC,WAAW;MAAAL,QAAA,gBACxBhG,OAAA;QAAAgG,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbpG,OAAA;QAAKqG,SAAS,EAAC,cAAc;QAAAL,QAAA,gBAC3BhG,OAAA;UAAAgG,QAAA,GAAG,4BAAM,eAAAhG,OAAA;YAAMqG,SAAS,EAAE5F,WAAW,KAAKb,MAAM,CAACe,GAAG,GAAG,UAAU,GAAG,YAAa;YAAAqF,QAAA,EAC9EvF,WAAW,KAAKb,MAAM,CAACe,GAAG,GAAG,IAAI,GAAG;UAAI;YAAAsF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EACVpF,YAAY,iBAAIhB,OAAA;UAAGqG,SAAS,EAAC,eAAe;UAAAL,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EACpDxF,UAAU,KAAK,MAAM,iBACpBZ,OAAA;UAAKqG,SAAS,EAAC,aAAa;UAAAL,QAAA,gBAC1BhG,OAAA;YAAAgG,QAAA,EAAG;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACZpG,OAAA;YAAAgG,QAAA,GAAIlF,MAAM,KAAKlB,MAAM,CAACe,GAAG,GAAG,IAAI,GAAG,IAAI,EAAC,cAAE;UAAA;YAAAsF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAENpG,OAAA;QAAKqG,SAAS,EAAC,eAAe;QAAAL,QAAA,gBAC5BhG,OAAA;UAAKqG,SAAS,EAAC,oBAAoB;UAAAL,QAAA,gBACjChG,OAAA;YAAAgG,QAAA,EAAO;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpBpG,OAAA;YACEsG,KAAK,EAAEpF,UAAW;YAClBqF,QAAQ,EAAGC,CAAC,IAAKX,gBAAgB,CAACY,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;YAC1DK,QAAQ,EAAE/F,UAAU,KAAK,SAAS,IAAIU,WAAW,CAACsC,MAAM,GAAG,CAAE;YAAAoC,QAAA,gBAE7DhG,OAAA;cAAQsG,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BpG,OAAA;cAAQsG,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BpG,OAAA;cAAQsG,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BpG,OAAA;cAAQsG,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BpG,OAAA;cAAQsG,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENpG,OAAA;UAAKqG,SAAS,EAAC,eAAe;UAAAL,QAAA,gBAC5BhG,OAAA;YAAAgG,QAAA,EAAO;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClBpG,OAAA;YACEsG,KAAK,EAAElF,WAAY;YACnBmF,QAAQ,EAAEA,CAAA,KAAMX,iBAAiB,CAAC,CAAE;YACpCe,QAAQ,EAAE/F,UAAU,KAAK,SAAS,IAAIU,WAAW,CAACsC,MAAM,GAAG,CAAE;YAAAoC,QAAA,gBAE7DhG,OAAA;cAAQsG,KAAK,EAAE1G,MAAM,CAACe,GAAI;cAAAqF,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtCpG,OAAA;cAAQsG,KAAK,EAAE1G,MAAM,CAACiC,KAAM;cAAAmE,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENpG,OAAA;UACEqG,SAAS,EAAC,mBAAmB;UAC7BO,OAAO,EAAEnB,UAAW;UACpBkB,QAAQ,EAAErF,WAAW,CAACsC,MAAM,GAAG,CAAC,IAAIhD,UAAU,KAAK,SAAU;UAAAoF,QAAA,EAC9D;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETpG,OAAA;UACEqG,SAAS,EAAC,iBAAiB;UAC3BO,OAAO,EAAEjF,SAAU;UAAAqE,QAAA,EACpB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETpG,OAAA;UACEqG,SAAS,EAAC,mBAAmB;UAC7BO,OAAO,EAAEb,QAAS;UAAAC,QAAA,EACnB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpG,OAAA;MAAKqG,SAAS,EAAC,iBAAiB;MAAAL,QAAA,eAC9BhG,OAAA,CAACF,UAAU;QACTK,KAAK,EAAEA,KAAM;QACbE,YAAY,EAAEA,YAAa;QAC3BE,UAAU,EAAEA,UAAW;QACvBsG,WAAW,EAAEjE,eAAgB;QAC7BkE,QAAQ,EAAE1F,WAAW,KAAKxB,MAAM,CAACiC;MAAM;QAAAoE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClG,EAAA,CAzlBID,MAAM;EAAA,QAYOV,WAAW;AAAA;AAAAwH,EAAA,GAZxB9G,MAAM;AA2lBZ,eAAeA,MAAM;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}