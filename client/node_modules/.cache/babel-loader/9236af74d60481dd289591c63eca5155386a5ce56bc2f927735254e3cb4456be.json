{"ast":null,"code":"var _jsxFileName = \"/Users/peng/Desktop/\\u4EBA\\u5DE5\\u667A\\u80FD\\u7B56\\u7565/chinese-chess-game/client/src/pages/AIGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initializeBoard, isValidMove, isCheck, checkGameEnd, COLORS } from '../utils/chessRules';\nimport { getBestMove } from '../utils/chessAI';\nimport ChessBoard from '../components/ChessBoard';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AIGame = () => {\n  _s();\n  const [board, setBoard] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(COLORS.RED); // 红方先行\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [winner, setWinner] = useState(null);\n  const [isCheckState, setIsCheckState] = useState(false);\n  const [difficulty, setDifficulty] = useState(3); // 默认难度级别为3\n  const [playerColor, setPlayerColor] = useState(COLORS.RED); // 默认玩家执红\n  const [moveHistory, setMoveHistory] = useState([]);\n  const navigate = useNavigate();\n\n  // 初始化棋盘\n  useEffect(() => {\n    console.log('初始化棋盘useEffect触发, 玩家颜色:', playerColor);\n    resetGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playerColor]);\n\n  // 调试当前回合和玩家颜色的变化\n  useEffect(() => {\n    console.log('回合/玩家颜色状态更新 - 当前回合:', currentTurn, '玩家颜色:', playerColor, '是否为玩家回合:', currentTurn === playerColor);\n  }, [currentTurn, playerColor]);\n\n  // 重置游戏\n  const resetGame = () => {\n    console.log('重置游戏，玩家颜色:', playerColor);\n    const newBoard = initializeBoard();\n\n    // 重置所有状态\n    setBoard(newBoard);\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(COLORS.RED); // 红方永远先行\n    setGameStatus('playing');\n    setWinner(null);\n    setIsCheckState(false);\n    setMoveHistory([]);\n    console.log('游戏状态重置完成，玩家颜色:', playerColor);\n\n    // 如果AI是红方且先行，立即执行AI移动\n    if (playerColor === COLORS.BLACK) {\n      console.log('AI执红先行，计算首步移动');\n\n      // 延迟确保UI已更新\n      setTimeout(() => {\n        // 获取AI的移动\n        try {\n          const boardCopy = JSON.parse(JSON.stringify(newBoard));\n          const aiMove = getBestMove(boardCopy, COLORS.RED, difficulty);\n          if (aiMove) {\n            console.log('AI首步移动:', aiMove);\n            const {\n              fromRow,\n              fromCol,\n              toRow,\n              toCol\n            } = aiMove;\n\n            // 执行移动\n            const updatedBoard = JSON.parse(JSON.stringify(boardCopy));\n            updatedBoard[toRow][toCol] = updatedBoard[fromRow][fromCol];\n            updatedBoard[fromRow][fromCol] = null;\n\n            // 直接更新状态\n            setBoard(updatedBoard);\n            setCurrentTurn(COLORS.BLACK);\n            setMoveHistory([{\n              fromRow,\n              fromCol,\n              toRow,\n              toCol,\n              piece: boardCopy[fromRow][fromCol],\n              captured: boardCopy[toRow][toCol],\n              board: boardCopy\n            }]);\n\n            // 检查是否将军\n            const isInCheck = isCheck(updatedBoard, COLORS.BLACK);\n            setIsCheckState(isInCheck);\n          }\n        } catch (error) {\n          console.error('AI首步移动出错:', error);\n        }\n      }, 500);\n    }\n  };\n\n  // 当前是否轮到玩家行动\n  const isPlayerTurn = currentTurn === playerColor;\n\n  // 格子点击处理\n  const handleCellClick = (row, col) => {\n    try {\n      console.log('点击格子:', row, col, '当前回合:', currentTurn, '是否玩家回合:', isPlayerTurn);\n\n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的格子坐标:', row, col);\n        return;\n      }\n\n      // 游戏结束或非玩家回合时不允许操作\n      if (gameStatus !== 'playing' || !isPlayerTurn) {\n        if (gameStatus !== 'playing') {\n          console.log('游戏已结束，无法移动');\n        } else {\n          console.log('当前不是您的回合，玩家颜色:', playerColor, '当前回合:', currentTurn);\n        }\n        return;\n      }\n      const clickedPiece = board[row][col];\n      console.log('点击的棋子:', clickedPiece);\n\n      // 如果已选中棋子，尝试移动\n      if (selectedCell) {\n        const {\n          row: selectedRow,\n          col: selectedCol\n        } = selectedCell;\n        console.log('当前已选中棋子:', selectedRow, selectedCol);\n\n        // 验证选中的格子是否有效\n        if (selectedRow < 0 || selectedRow >= 10 || selectedCol < 0 || selectedCol >= 9) {\n          console.error('无效的已选中格子:', selectedCell);\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n        const selectedPiece = board[selectedRow][selectedCol];\n        console.log('已选中的棋子:', selectedPiece);\n\n        // 点击同一个棋子，取消选择\n        if (selectedRow === row && selectedCol === col) {\n          console.log('取消选择当前棋子');\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n\n        // 检查是否是有效移动\n        const isValid = validMoves.some(move => move.row === row && move.col === col);\n        console.log('是否有效移动:', isValid, '有效移动列表:', validMoves);\n        if (selectedPiece && selectedPiece.color === currentTurn && isValid) {\n          console.log('执行有效移动');\n          // 执行移动\n          makeMove(selectedRow, selectedCol, row, col);\n        } else if (clickedPiece && clickedPiece.color === currentTurn) {\n          console.log('选择新的己方棋子');\n          // 选择新的己方棋子\n          selectPiece(row, col);\n        } else {\n          console.log('无效点击，取消选择');\n          // 无效点击，取消选择\n          setSelectedCell(null);\n          setValidMoves([]);\n        }\n      }\n      // 如果未选中棋子，选择一个棋子\n      else if (clickedPiece && clickedPiece.color === currentTurn) {\n        console.log('选择己方棋子');\n        selectPiece(row, col);\n      } else if (clickedPiece) {\n        console.log('不能选择对方的棋子');\n      } else {\n        console.log('此处没有棋子');\n      }\n    } catch (error) {\n      console.error('点击处理出错:', error);\n      // 重置选择状态\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 选择棋子，计算有效移动\n  const selectPiece = (row, col) => {\n    try {\n      console.log('选择棋子:', row, col);\n\n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的棋子坐标:', row, col);\n        return;\n      }\n\n      // 验证有棋子\n      const piece = board[row][col];\n      if (!piece) {\n        console.error('该位置没有棋子:', row, col);\n        return;\n      }\n\n      // 验证是当前回合的棋子\n      if (piece.color !== currentTurn) {\n        console.error('不是当前回合的棋子:', piece, '当前回合:', currentTurn);\n        return;\n      }\n      setSelectedCell({\n        row,\n        col\n      });\n      console.log('已选中棋子:', {\n        row,\n        col\n      }, piece);\n\n      // 计算有效移动\n      const newValidMoves = [];\n      for (let toRow = 0; toRow < 10; toRow++) {\n        for (let toCol = 0; toCol < 9; toCol++) {\n          try {\n            if (isValidMove(piece, board, row, col, toRow, toCol)) {\n              // 模拟移动，检查是否会导致自己被将军\n              try {\n                const newBoard = JSON.parse(JSON.stringify(board));\n                newBoard[toRow][toCol] = newBoard[row][col];\n                newBoard[row][col] = null;\n                if (!isCheck(newBoard, piece.color)) {\n                  newValidMoves.push({\n                    row: toRow,\n                    col: toCol\n                  });\n                }\n              } catch (checkError) {\n                console.error('检查将军状态时出错:', checkError, toRow, toCol);\n                // 跳过这个移动\n                continue;\n              }\n            }\n          } catch (moveError) {\n            console.error('检查有效移动时出错:', moveError, toRow, toCol);\n            // 跳过这个移动\n            continue;\n          }\n        }\n      }\n      console.log('计算有效移动数量:', newValidMoves.length, newValidMoves);\n\n      // 如果没有有效移动，提示用户\n      if (newValidMoves.length === 0) {\n        console.log('没有有效移动可用');\n      }\n      setValidMoves(newValidMoves);\n    } catch (error) {\n      console.error('选择棋子出错:', error);\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 执行移动\n  const makeMove = (fromRow, fromCol, toRow, toCol) => {\n    try {\n      console.log('执行移动:', fromRow, fromCol, toRow, toCol, '当前回合:', currentTurn);\n\n      // 验证坐标和棋子\n      if (fromRow < 0 || fromRow >= 10 || fromCol < 0 || fromCol >= 9 || toRow < 0 || toRow >= 10 || toCol < 0 || toCol >= 9) {\n        return;\n      }\n      const piece = board[fromRow][fromCol];\n      if (!piece || piece.color !== currentTurn) {\n        return;\n      }\n\n      // 创建新棋盘\n      const newBoard = JSON.parse(JSON.stringify(board));\n\n      // 记录移动历史\n      const historyEntry = {\n        fromRow,\n        fromCol,\n        toRow,\n        toCol,\n        piece: board[fromRow][fromCol],\n        captured: board[toRow][toCol],\n        board: JSON.parse(JSON.stringify(board))\n      };\n\n      // 执行移动\n      newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n      newBoard[fromRow][fromCol] = null;\n\n      // 更新状态\n      setBoard(newBoard);\n      setSelectedCell(null);\n      setValidMoves([]);\n      setMoveHistory(prev => [...prev, historyEntry]);\n\n      // 下一回合\n      const nextTurn = currentTurn === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n      setCurrentTurn(nextTurn);\n\n      // 检查将军\n      const isInCheck = isCheck(newBoard, nextTurn);\n      setIsCheckState(isInCheck);\n\n      // 检查游戏结束\n      const gameEndResult = checkGameEnd(newBoard, currentTurn);\n      if (gameEndResult.isGameOver) {\n        setGameStatus('over');\n        setWinner(gameEndResult.winner);\n        return;\n      }\n\n      // 如果下一回合是AI的回合，执行AI移动\n      if (nextTurn !== playerColor) {\n        handleAIMove(newBoard);\n      }\n    } catch (error) {\n      console.error('执行移动时出错:', error);\n    }\n  };\n\n  // 处理AI移动\n  const handleAIMove = currentBoard => {\n    // 延迟执行，确保UI已更新\n    setTimeout(() => {\n      try {\n        const aiColor = playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n        console.log('AI回合，颜色:', aiColor);\n\n        // 获取AI移动\n        const move = getBestMove(currentBoard, aiColor, difficulty);\n        if (move) {\n          console.log('AI移动:', move);\n          makeMove(move.fromRow, move.fromCol, move.toRow, move.toCol);\n        } else {\n          // 尝试随机移动\n          const moves = [];\n          for (let fromRow = 0; fromRow < 10; fromRow++) {\n            for (let fromCol = 0; fromCol < 9; fromCol++) {\n              const piece = currentBoard[fromRow][fromCol];\n              if (piece && piece.color === aiColor) {\n                for (let toRow = 0; toRow < 10; toRow++) {\n                  for (let toCol = 0; toCol < 9; toCol++) {\n                    if (isValidMove(piece, currentBoard, fromRow, fromCol, toRow, toCol)) {\n                      const tempBoard = JSON.parse(JSON.stringify(currentBoard));\n                      tempBoard[toRow][toCol] = tempBoard[fromRow][fromCol];\n                      tempBoard[fromRow][fromCol] = null;\n                      if (!isCheck(tempBoard, aiColor)) {\n                        moves.push({\n                          fromRow,\n                          fromCol,\n                          toRow,\n                          toCol\n                        });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (moves.length > 0) {\n            const randomMove = moves[Math.floor(Math.random() * moves.length)];\n            console.log('随机AI移动:', randomMove);\n            makeMove(randomMove.fromRow, randomMove.fromCol, randomMove.toRow, randomMove.toCol);\n          } else {\n            console.log('AI无法移动，游戏结束');\n            setGameStatus('over');\n            setWinner(playerColor);\n          }\n        }\n      } catch (error) {\n        console.error('AI移动出错:', error);\n      }\n    }, 500);\n  };\n\n  // 悔棋\n  const handleUndo = () => {\n    if (moveHistory.length < 2 || gameStatus !== 'playing') return;\n\n    // 需要撤销两步（玩家和AI的移动）\n    const previousState = moveHistory[moveHistory.length - 2];\n    setBoard(previousState.board);\n    setMoveHistory(moveHistory.slice(0, -2));\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(playerColor);\n    setIsCheckState(false);\n  };\n\n  // 切换玩家颜色\n  const togglePlayerColor = () => {\n    setPlayerColor(playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED);\n  };\n\n  // 修改AI难度\n  const changeDifficulty = newDifficulty => {\n    setDifficulty(newDifficulty);\n  };\n\n  // 返回主页\n  const goToHome = () => {\n    navigate('/');\n  };\n  if (!board) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u52A0\\u8F7D\\u4E2D...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u4EBA\\u673A\\u5BF9\\u6218\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u5F53\\u524D\\u56DE\\u5408: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: currentTurn === COLORS.RED ? 'red-text' : 'black-text',\n            children: currentTurn === COLORS.RED ? '红方' : '黑方'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), isCheckState && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"check-warning\",\n          children: \"\\u5C06\\u519B\\uFF01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 28\n        }, this), gameStatus === 'over' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-result\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u6E38\\u620F\\u7ED3\\u675F\\uFF01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [winner === COLORS.RED ? '红方' : '黑方', \"\\u83B7\\u80DC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"difficulty-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"AI\\u96BE\\u5EA6\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: difficulty,\n            onChange: e => changeDifficulty(Number(e.target.value)),\n            disabled: gameStatus === 'playing' && moveHistory.length > 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: 1,\n              children: \"\\u7B80\\u5355\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 2,\n              children: \"\\u4E2D\\u7B49\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 3,\n              children: \"\\u56F0\\u96BE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 4,\n              children: \"\\u4E13\\u5BB6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: 5,\n              children: \"\\u5927\\u5E08\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u6267\\u5B50\\uFF1A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: playerColor,\n            onChange: () => togglePlayerColor(),\n            disabled: gameStatus === 'playing' && moveHistory.length > 0,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: COLORS.RED,\n              children: \"\\u7EA2\\u65B9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: COLORS.BLACK,\n              children: \"\\u9ED1\\u65B9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn secondary-btn\",\n          onClick: handleUndo,\n          disabled: moveHistory.length < 2 || gameStatus !== 'playing',\n          children: \"\\u6094\\u68CB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn primary-btn\",\n          onClick: resetGame,\n          children: \"\\u91CD\\u65B0\\u5F00\\u59CB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn secondary-btn\",\n          onClick: goToHome,\n          children: \"\\u8FD4\\u56DE\\u4E3B\\u9875\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(ChessBoard, {\n        board: board,\n        selectedCell: selectedCell,\n        validMoves: validMoves,\n        onCellClick: handleCellClick,\n        reversed: playerColor === COLORS.BLACK\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 5\n  }, this);\n};\n_s(AIGame, \"MEt3Jq8hbiI6RFA4S5UIC4mRvyE=\", false, function () {\n  return [useNavigate];\n});\n_c = AIGame;\nexport default AIGame;\nvar _c;\n$RefreshReg$(_c, \"AIGame\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","initializeBoard","isValidMove","isCheck","checkGameEnd","COLORS","getBestMove","ChessBoard","jsxDEV","_jsxDEV","AIGame","_s","board","setBoard","selectedCell","setSelectedCell","validMoves","setValidMoves","currentTurn","setCurrentTurn","RED","gameStatus","setGameStatus","winner","setWinner","isCheckState","setIsCheckState","difficulty","setDifficulty","playerColor","setPlayerColor","moveHistory","setMoveHistory","navigate","console","log","resetGame","newBoard","BLACK","setTimeout","boardCopy","JSON","parse","stringify","aiMove","fromRow","fromCol","toRow","toCol","updatedBoard","piece","captured","isInCheck","error","isPlayerTurn","handleCellClick","row","col","clickedPiece","selectedRow","selectedCol","selectedPiece","isValid","some","move","color","makeMove","selectPiece","newValidMoves","push","checkError","moveError","length","historyEntry","prev","nextTurn","gameEndResult","isGameOver","handleAIMove","currentBoard","aiColor","moves","tempBoard","randomMove","Math","floor","random","handleUndo","previousState","slice","togglePlayerColor","changeDifficulty","newDifficulty","goToHome","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","e","Number","target","disabled","onClick","onCellClick","reversed","_c","$RefreshReg$"],"sources":["/Users/peng/Desktop/人工智能策略/chinese-chess-game/client/src/pages/AIGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  initializeBoard, \n  isValidMove, \n  isCheck, \n  checkGameEnd, \n  COLORS \n} from '../utils/chessRules';\nimport { getBestMove } from '../utils/chessAI';\nimport ChessBoard from '../components/ChessBoard';\nimport './Game.css';\n\nconst AIGame = () => {\n  const [board, setBoard] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(COLORS.RED); // 红方先行\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [winner, setWinner] = useState(null);\n  const [isCheckState, setIsCheckState] = useState(false);\n  const [difficulty, setDifficulty] = useState(3); // 默认难度级别为3\n  const [playerColor, setPlayerColor] = useState(COLORS.RED); // 默认玩家执红\n  const [moveHistory, setMoveHistory] = useState([]);\n  \n  const navigate = useNavigate();\n\n  // 初始化棋盘\n  useEffect(() => {\n    console.log('初始化棋盘useEffect触发, 玩家颜色:', playerColor);\n    resetGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [playerColor]);\n\n  // 调试当前回合和玩家颜色的变化\n  useEffect(() => {\n    console.log('回合/玩家颜色状态更新 - 当前回合:', currentTurn, '玩家颜色:', playerColor, '是否为玩家回合:', currentTurn === playerColor);\n  }, [currentTurn, playerColor]);\n\n  // 重置游戏\n  const resetGame = () => {\n    console.log('重置游戏，玩家颜色:', playerColor);\n    const newBoard = initializeBoard();\n    \n    // 重置所有状态\n    setBoard(newBoard);\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(COLORS.RED);  // 红方永远先行\n    setGameStatus('playing');\n    setWinner(null);\n    setIsCheckState(false);\n    setMoveHistory([]);\n    \n    console.log('游戏状态重置完成，玩家颜色:', playerColor);\n    \n    // 如果AI是红方且先行，立即执行AI移动\n    if (playerColor === COLORS.BLACK) {\n      console.log('AI执红先行，计算首步移动');\n      \n      // 延迟确保UI已更新\n      setTimeout(() => {\n        // 获取AI的移动\n        try {\n          const boardCopy = JSON.parse(JSON.stringify(newBoard));\n          const aiMove = getBestMove(boardCopy, COLORS.RED, difficulty);\n          \n          if (aiMove) {\n            console.log('AI首步移动:', aiMove);\n            const { fromRow, fromCol, toRow, toCol } = aiMove;\n            \n            // 执行移动\n            const updatedBoard = JSON.parse(JSON.stringify(boardCopy));\n            updatedBoard[toRow][toCol] = updatedBoard[fromRow][fromCol];\n            updatedBoard[fromRow][fromCol] = null;\n            \n            // 直接更新状态\n            setBoard(updatedBoard);\n            setCurrentTurn(COLORS.BLACK);\n            setMoveHistory([{\n              fromRow,\n              fromCol,\n              toRow,\n              toCol,\n              piece: boardCopy[fromRow][fromCol],\n              captured: boardCopy[toRow][toCol],\n              board: boardCopy\n            }]);\n            \n            // 检查是否将军\n            const isInCheck = isCheck(updatedBoard, COLORS.BLACK);\n            setIsCheckState(isInCheck);\n          }\n        } catch (error) {\n          console.error('AI首步移动出错:', error);\n        }\n      }, 500);\n    }\n  };\n\n  // 当前是否轮到玩家行动\n  const isPlayerTurn = currentTurn === playerColor;\n\n  // 格子点击处理\n  const handleCellClick = (row, col) => {\n    try {\n      console.log('点击格子:', row, col, '当前回合:', currentTurn, '是否玩家回合:', isPlayerTurn);\n      \n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的格子坐标:', row, col);\n        return;\n      }\n      \n      // 游戏结束或非玩家回合时不允许操作\n      if (gameStatus !== 'playing' || !isPlayerTurn) {\n        if (gameStatus !== 'playing') {\n          console.log('游戏已结束，无法移动');\n        } else {\n          console.log('当前不是您的回合，玩家颜色:', playerColor, '当前回合:', currentTurn);\n        }\n        return;\n      }\n      \n      const clickedPiece = board[row][col];\n      console.log('点击的棋子:', clickedPiece);\n      \n      // 如果已选中棋子，尝试移动\n      if (selectedCell) {\n        const { row: selectedRow, col: selectedCol } = selectedCell;\n        console.log('当前已选中棋子:', selectedRow, selectedCol);\n        \n        // 验证选中的格子是否有效\n        if (selectedRow < 0 || selectedRow >= 10 || selectedCol < 0 || selectedCol >= 9) {\n          console.error('无效的已选中格子:', selectedCell);\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n        \n        const selectedPiece = board[selectedRow][selectedCol];\n        console.log('已选中的棋子:', selectedPiece);\n        \n        // 点击同一个棋子，取消选择\n        if (selectedRow === row && selectedCol === col) {\n          console.log('取消选择当前棋子');\n          setSelectedCell(null);\n          setValidMoves([]);\n          return;\n        }\n        \n        // 检查是否是有效移动\n        const isValid = validMoves.some(move => move.row === row && move.col === col);\n        console.log('是否有效移动:', isValid, '有效移动列表:', validMoves);\n        \n        if (\n          selectedPiece && \n          selectedPiece.color === currentTurn &&\n          isValid\n        ) {\n          console.log('执行有效移动');\n          // 执行移动\n          makeMove(selectedRow, selectedCol, row, col);\n        } else if (clickedPiece && clickedPiece.color === currentTurn) {\n          console.log('选择新的己方棋子');\n          // 选择新的己方棋子\n          selectPiece(row, col);\n        } else {\n          console.log('无效点击，取消选择');\n          // 无效点击，取消选择\n          setSelectedCell(null);\n          setValidMoves([]);\n        }\n      } \n      // 如果未选中棋子，选择一个棋子\n      else if (clickedPiece && clickedPiece.color === currentTurn) {\n        console.log('选择己方棋子');\n        selectPiece(row, col);\n      } else if (clickedPiece) {\n        console.log('不能选择对方的棋子');\n      } else {\n        console.log('此处没有棋子');\n      }\n    } catch (error) {\n      console.error('点击处理出错:', error);\n      // 重置选择状态\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 选择棋子，计算有效移动\n  const selectPiece = (row, col) => {\n    try {\n      console.log('选择棋子:', row, col);\n      \n      // 验证坐标\n      if (row < 0 || row >= 10 || col < 0 || col >= 9) {\n        console.error('无效的棋子坐标:', row, col);\n        return;\n      }\n      \n      // 验证有棋子\n      const piece = board[row][col];\n      if (!piece) {\n        console.error('该位置没有棋子:', row, col);\n        return;\n      }\n      \n      // 验证是当前回合的棋子\n      if (piece.color !== currentTurn) {\n        console.error('不是当前回合的棋子:', piece, '当前回合:', currentTurn);\n        return;\n      }\n      \n      setSelectedCell({ row, col });\n      console.log('已选中棋子:', { row, col }, piece);\n      \n      // 计算有效移动\n      const newValidMoves = [];\n      \n      for (let toRow = 0; toRow < 10; toRow++) {\n        for (let toCol = 0; toCol < 9; toCol++) {\n          try {\n            if (isValidMove(piece, board, row, col, toRow, toCol)) {\n              // 模拟移动，检查是否会导致自己被将军\n              try {\n                const newBoard = JSON.parse(JSON.stringify(board));\n                newBoard[toRow][toCol] = newBoard[row][col];\n                newBoard[row][col] = null;\n                \n                if (!isCheck(newBoard, piece.color)) {\n                  newValidMoves.push({ row: toRow, col: toCol });\n                }\n              } catch (checkError) {\n                console.error('检查将军状态时出错:', checkError, toRow, toCol);\n                // 跳过这个移动\n                continue;\n              }\n            }\n          } catch (moveError) {\n            console.error('检查有效移动时出错:', moveError, toRow, toCol);\n            // 跳过这个移动\n            continue;\n          }\n        }\n      }\n      \n      console.log('计算有效移动数量:', newValidMoves.length, newValidMoves);\n      \n      // 如果没有有效移动，提示用户\n      if (newValidMoves.length === 0) {\n        console.log('没有有效移动可用');\n      }\n      \n      setValidMoves(newValidMoves);\n    } catch (error) {\n      console.error('选择棋子出错:', error);\n      setSelectedCell(null);\n      setValidMoves([]);\n    }\n  };\n\n  // 执行移动\n  const makeMove = (fromRow, fromCol, toRow, toCol) => {\n    try {\n      console.log('执行移动:', fromRow, fromCol, toRow, toCol, '当前回合:', currentTurn);\n      \n      // 验证坐标和棋子\n      if (\n        fromRow < 0 || fromRow >= 10 || fromCol < 0 || fromCol >= 9 ||\n        toRow < 0 || toRow >= 10 || toCol < 0 || toCol >= 9\n      ) {\n        return;\n      }\n      \n      const piece = board[fromRow][fromCol];\n      if (!piece || piece.color !== currentTurn) {\n        return;\n      }\n      \n      // 创建新棋盘\n      const newBoard = JSON.parse(JSON.stringify(board));\n      \n      // 记录移动历史\n      const historyEntry = {\n        fromRow,\n        fromCol,\n        toRow,\n        toCol,\n        piece: board[fromRow][fromCol],\n        captured: board[toRow][toCol],\n        board: JSON.parse(JSON.stringify(board))\n      };\n      \n      // 执行移动\n      newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n      newBoard[fromRow][fromCol] = null;\n      \n      // 更新状态\n      setBoard(newBoard);\n      setSelectedCell(null);\n      setValidMoves([]);\n      setMoveHistory(prev => [...prev, historyEntry]);\n      \n      // 下一回合\n      const nextTurn = currentTurn === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n      setCurrentTurn(nextTurn);\n      \n      // 检查将军\n      const isInCheck = isCheck(newBoard, nextTurn);\n      setIsCheckState(isInCheck);\n      \n      // 检查游戏结束\n      const gameEndResult = checkGameEnd(newBoard, currentTurn);\n      if (gameEndResult.isGameOver) {\n        setGameStatus('over');\n        setWinner(gameEndResult.winner);\n        return;\n      }\n      \n      // 如果下一回合是AI的回合，执行AI移动\n      if (nextTurn !== playerColor) {\n        handleAIMove(newBoard);\n      }\n    } catch (error) {\n      console.error('执行移动时出错:', error);\n    }\n  };\n\n  // 处理AI移动\n  const handleAIMove = (currentBoard) => {\n    // 延迟执行，确保UI已更新\n    setTimeout(() => {\n      try {\n        const aiColor = playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED;\n        console.log('AI回合，颜色:', aiColor);\n        \n        // 获取AI移动\n        const move = getBestMove(currentBoard, aiColor, difficulty);\n        \n        if (move) {\n          console.log('AI移动:', move);\n          makeMove(move.fromRow, move.fromCol, move.toRow, move.toCol);\n        } else {\n          // 尝试随机移动\n          const moves = [];\n          \n          for (let fromRow = 0; fromRow < 10; fromRow++) {\n            for (let fromCol = 0; fromCol < 9; fromCol++) {\n              const piece = currentBoard[fromRow][fromCol];\n              if (piece && piece.color === aiColor) {\n                for (let toRow = 0; toRow < 10; toRow++) {\n                  for (let toCol = 0; toCol < 9; toCol++) {\n                    if (isValidMove(piece, currentBoard, fromRow, fromCol, toRow, toCol)) {\n                      const tempBoard = JSON.parse(JSON.stringify(currentBoard));\n                      tempBoard[toRow][toCol] = tempBoard[fromRow][fromCol];\n                      tempBoard[fromRow][fromCol] = null;\n                      \n                      if (!isCheck(tempBoard, aiColor)) {\n                        moves.push({ fromRow, fromCol, toRow, toCol });\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          \n          if (moves.length > 0) {\n            const randomMove = moves[Math.floor(Math.random() * moves.length)];\n            console.log('随机AI移动:', randomMove);\n            makeMove(randomMove.fromRow, randomMove.fromCol, randomMove.toRow, randomMove.toCol);\n          } else {\n            console.log('AI无法移动，游戏结束');\n            setGameStatus('over');\n            setWinner(playerColor);\n          }\n        }\n      } catch (error) {\n        console.error('AI移动出错:', error);\n      }\n    }, 500);\n  };\n\n  // 悔棋\n  const handleUndo = () => {\n    if (moveHistory.length < 2 || gameStatus !== 'playing') return;\n    \n    // 需要撤销两步（玩家和AI的移动）\n    const previousState = moveHistory[moveHistory.length - 2];\n    setBoard(previousState.board);\n    setMoveHistory(moveHistory.slice(0, -2));\n    setSelectedCell(null);\n    setValidMoves([]);\n    setCurrentTurn(playerColor);\n    setIsCheckState(false);\n  };\n\n  // 切换玩家颜色\n  const togglePlayerColor = () => {\n    setPlayerColor(playerColor === COLORS.RED ? COLORS.BLACK : COLORS.RED);\n  };\n\n  // 修改AI难度\n  const changeDifficulty = (newDifficulty) => {\n    setDifficulty(newDifficulty);\n  };\n\n  // 返回主页\n  const goToHome = () => {\n    navigate('/');\n  };\n\n  if (!board) return <div>加载中...</div>;\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-info\">\n        <h1>人机对战</h1>\n        <div className=\"status-panel\">\n          <p>当前回合: <span className={currentTurn === COLORS.RED ? 'red-text' : 'black-text'}>\n            {currentTurn === COLORS.RED ? '红方' : '黑方'}\n          </span></p>\n          {isCheckState && <p className=\"check-warning\">将军！</p>}\n          {gameStatus === 'over' && (\n            <div className=\"game-result\">\n              <p>游戏结束！</p>\n              <p>{winner === COLORS.RED ? '红方' : '黑方'}获胜</p>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"control-panel\">\n          <div className=\"difficulty-control\">\n            <label>AI难度：</label>\n            <select \n              value={difficulty} \n              onChange={(e) => changeDifficulty(Number(e.target.value))}\n              disabled={gameStatus === 'playing' && moveHistory.length > 0}\n            >\n              <option value={1}>简单</option>\n              <option value={2}>中等</option>\n              <option value={3}>困难</option>\n              <option value={4}>专家</option>\n              <option value={5}>大师</option>\n            </select>\n          </div>\n          \n          <div className=\"color-control\">\n            <label>执子：</label>\n            <select \n              value={playerColor} \n              onChange={() => togglePlayerColor()}\n              disabled={gameStatus === 'playing' && moveHistory.length > 0}\n            >\n              <option value={COLORS.RED}>红方</option>\n              <option value={COLORS.BLACK}>黑方</option>\n            </select>\n          </div>\n          \n          <button \n            className=\"btn secondary-btn\" \n            onClick={handleUndo}\n            disabled={moveHistory.length < 2 || gameStatus !== 'playing'}\n          >\n            悔棋\n          </button>\n          \n          <button \n            className=\"btn primary-btn\" \n            onClick={resetGame}\n          >\n            重新开始\n          </button>\n          \n          <button \n            className=\"btn secondary-btn\" \n            onClick={goToHome}\n          >\n            返回主页\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"board-container\">\n        <ChessBoard \n          board={board}\n          selectedCell={selectedCell}\n          validMoves={validMoves}\n          onCellClick={handleCellClick}\n          reversed={playerColor === COLORS.BLACK}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AIGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,eAAe,EACfC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZC,MAAM,QACD,qBAAqB;AAC5B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAACO,MAAM,CAACe,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,SAAS,CAAC;EACvD,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAACO,MAAM,CAACe,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMmC,QAAQ,GAAGjC,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACdmC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEN,WAAW,CAAC;IACnDO,SAAS,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;;EAEjB;EACA9B,SAAS,CAAC,MAAM;IACdmC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEjB,WAAW,EAAE,OAAO,EAAEW,WAAW,EAAE,UAAU,EAAEX,WAAW,KAAKW,WAAW,CAAC;EAChH,CAAC,EAAE,CAACX,WAAW,EAAEW,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,WAAW,CAAC;IACtC,MAAMQ,QAAQ,GAAGpC,eAAe,CAAC,CAAC;;IAElC;IACAY,QAAQ,CAACwB,QAAQ,CAAC;IAClBtB,eAAe,CAAC,IAAI,CAAC;IACrBE,aAAa,CAAC,EAAE,CAAC;IACjBE,cAAc,CAACd,MAAM,CAACe,GAAG,CAAC,CAAC,CAAE;IAC7BE,aAAa,CAAC,SAAS,CAAC;IACxBE,SAAS,CAAC,IAAI,CAAC;IACfE,eAAe,CAAC,KAAK,CAAC;IACtBM,cAAc,CAAC,EAAE,CAAC;IAElBE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,WAAW,CAAC;;IAE1C;IACA,IAAIA,WAAW,KAAKxB,MAAM,CAACiC,KAAK,EAAE;MAChCJ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;;MAE5B;MACAI,UAAU,CAAC,MAAM;QACf;QACA,IAAI;UACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACN,QAAQ,CAAC,CAAC;UACtD,MAAMO,MAAM,GAAGtC,WAAW,CAACkC,SAAS,EAAEnC,MAAM,CAACe,GAAG,EAAEO,UAAU,CAAC;UAE7D,IAAIiB,MAAM,EAAE;YACVV,OAAO,CAACC,GAAG,CAAC,SAAS,EAAES,MAAM,CAAC;YAC9B,MAAM;cAAEC,OAAO;cAAEC,OAAO;cAAEC,KAAK;cAAEC;YAAM,CAAC,GAAGJ,MAAM;;YAEjD;YACA,MAAMK,YAAY,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,SAAS,CAAC,CAAC;YAC1DS,YAAY,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGC,YAAY,CAACJ,OAAO,CAAC,CAACC,OAAO,CAAC;YAC3DG,YAAY,CAACJ,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,IAAI;;YAErC;YACAjC,QAAQ,CAACoC,YAAY,CAAC;YACtB9B,cAAc,CAACd,MAAM,CAACiC,KAAK,CAAC;YAC5BN,cAAc,CAAC,CAAC;cACda,OAAO;cACPC,OAAO;cACPC,KAAK;cACLC,KAAK;cACLE,KAAK,EAAEV,SAAS,CAACK,OAAO,CAAC,CAACC,OAAO,CAAC;cAClCK,QAAQ,EAAEX,SAAS,CAACO,KAAK,CAAC,CAACC,KAAK,CAAC;cACjCpC,KAAK,EAAE4B;YACT,CAAC,CAAC,CAAC;;YAEH;YACA,MAAMY,SAAS,GAAGjD,OAAO,CAAC8C,YAAY,EAAE5C,MAAM,CAACiC,KAAK,CAAC;YACrDZ,eAAe,CAAC0B,SAAS,CAAC;UAC5B;QACF,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdnB,OAAO,CAACmB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACnC;MACF,CAAC,EAAE,GAAG,CAAC;IACT;EACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGpC,WAAW,KAAKW,WAAW;;EAEhD;EACA,MAAM0B,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACpC,IAAI;MACFvB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEqB,GAAG,EAAEC,GAAG,EAAE,OAAO,EAAEvC,WAAW,EAAE,SAAS,EAAEoC,YAAY,CAAC;;MAE7E;MACA,IAAIE,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,EAAE,IAAIC,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,CAAC,EAAE;QAC/CvB,OAAO,CAACmB,KAAK,CAAC,UAAU,EAAEG,GAAG,EAAEC,GAAG,CAAC;QACnC;MACF;;MAEA;MACA,IAAIpC,UAAU,KAAK,SAAS,IAAI,CAACiC,YAAY,EAAE;QAC7C,IAAIjC,UAAU,KAAK,SAAS,EAAE;UAC5Ba,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QAC3B,CAAC,MAAM;UACLD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,WAAW,EAAE,OAAO,EAAEX,WAAW,CAAC;QAClE;QACA;MACF;MAEA,MAAMwC,YAAY,GAAG9C,KAAK,CAAC4C,GAAG,CAAC,CAACC,GAAG,CAAC;MACpCvB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEuB,YAAY,CAAC;;MAEnC;MACA,IAAI5C,YAAY,EAAE;QAChB,MAAM;UAAE0C,GAAG,EAAEG,WAAW;UAAEF,GAAG,EAAEG;QAAY,CAAC,GAAG9C,YAAY;QAC3DoB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEwB,WAAW,EAAEC,WAAW,CAAC;;QAEjD;QACA,IAAID,WAAW,GAAG,CAAC,IAAIA,WAAW,IAAI,EAAE,IAAIC,WAAW,GAAG,CAAC,IAAIA,WAAW,IAAI,CAAC,EAAE;UAC/E1B,OAAO,CAACmB,KAAK,CAAC,WAAW,EAAEvC,YAAY,CAAC;UACxCC,eAAe,CAAC,IAAI,CAAC;UACrBE,aAAa,CAAC,EAAE,CAAC;UACjB;QACF;QAEA,MAAM4C,aAAa,GAAGjD,KAAK,CAAC+C,WAAW,CAAC,CAACC,WAAW,CAAC;QACrD1B,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE0B,aAAa,CAAC;;QAErC;QACA,IAAIF,WAAW,KAAKH,GAAG,IAAII,WAAW,KAAKH,GAAG,EAAE;UAC9CvB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;UACvBpB,eAAe,CAAC,IAAI,CAAC;UACrBE,aAAa,CAAC,EAAE,CAAC;UACjB;QACF;;QAEA;QACA,MAAM6C,OAAO,GAAG9C,UAAU,CAAC+C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,GAAG,KAAKA,GAAG,IAAIQ,IAAI,CAACP,GAAG,KAAKA,GAAG,CAAC;QAC7EvB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE2B,OAAO,EAAE,SAAS,EAAE9C,UAAU,CAAC;QAEtD,IACE6C,aAAa,IACbA,aAAa,CAACI,KAAK,KAAK/C,WAAW,IACnC4C,OAAO,EACP;UACA5B,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrB;UACA+B,QAAQ,CAACP,WAAW,EAAEC,WAAW,EAAEJ,GAAG,EAAEC,GAAG,CAAC;QAC9C,CAAC,MAAM,IAAIC,YAAY,IAAIA,YAAY,CAACO,KAAK,KAAK/C,WAAW,EAAE;UAC7DgB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;UACvB;UACAgC,WAAW,CAACX,GAAG,EAAEC,GAAG,CAAC;QACvB,CAAC,MAAM;UACLvB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;UACxB;UACApB,eAAe,CAAC,IAAI,CAAC;UACrBE,aAAa,CAAC,EAAE,CAAC;QACnB;MACF;MACA;MAAA,KACK,IAAIyC,YAAY,IAAIA,YAAY,CAACO,KAAK,KAAK/C,WAAW,EAAE;QAC3DgB,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrBgC,WAAW,CAACX,GAAG,EAAEC,GAAG,CAAC;MACvB,CAAC,MAAM,IAAIC,YAAY,EAAE;QACvBxB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC1B,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACvB;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B;MACAtC,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMkD,WAAW,GAAGA,CAACX,GAAG,EAAEC,GAAG,KAAK;IAChC,IAAI;MACFvB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEqB,GAAG,EAAEC,GAAG,CAAC;;MAE9B;MACA,IAAID,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,EAAE,IAAIC,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI,CAAC,EAAE;QAC/CvB,OAAO,CAACmB,KAAK,CAAC,UAAU,EAAEG,GAAG,EAAEC,GAAG,CAAC;QACnC;MACF;;MAEA;MACA,MAAMP,KAAK,GAAGtC,KAAK,CAAC4C,GAAG,CAAC,CAACC,GAAG,CAAC;MAC7B,IAAI,CAACP,KAAK,EAAE;QACVhB,OAAO,CAACmB,KAAK,CAAC,UAAU,EAAEG,GAAG,EAAEC,GAAG,CAAC;QACnC;MACF;;MAEA;MACA,IAAIP,KAAK,CAACe,KAAK,KAAK/C,WAAW,EAAE;QAC/BgB,OAAO,CAACmB,KAAK,CAAC,YAAY,EAAEH,KAAK,EAAE,OAAO,EAAEhC,WAAW,CAAC;QACxD;MACF;MAEAH,eAAe,CAAC;QAAEyC,GAAG;QAAEC;MAAI,CAAC,CAAC;MAC7BvB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE;QAAEqB,GAAG;QAAEC;MAAI,CAAC,EAAEP,KAAK,CAAC;;MAE1C;MACA,MAAMkB,aAAa,GAAG,EAAE;MAExB,KAAK,IAAIrB,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,EAAE,EAAEA,KAAK,EAAE,EAAE;QACvC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,EAAE,EAAE;UACtC,IAAI;YACF,IAAI9C,WAAW,CAACgD,KAAK,EAAEtC,KAAK,EAAE4C,GAAG,EAAEC,GAAG,EAAEV,KAAK,EAAEC,KAAK,CAAC,EAAE;cACrD;cACA,IAAI;gBACF,MAAMX,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC/B,KAAK,CAAC,CAAC;gBAClDyB,QAAQ,CAACU,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGX,QAAQ,CAACmB,GAAG,CAAC,CAACC,GAAG,CAAC;gBAC3CpB,QAAQ,CAACmB,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,IAAI;gBAEzB,IAAI,CAACtD,OAAO,CAACkC,QAAQ,EAAEa,KAAK,CAACe,KAAK,CAAC,EAAE;kBACnCG,aAAa,CAACC,IAAI,CAAC;oBAAEb,GAAG,EAAET,KAAK;oBAAEU,GAAG,EAAET;kBAAM,CAAC,CAAC;gBAChD;cACF,CAAC,CAAC,OAAOsB,UAAU,EAAE;gBACnBpC,OAAO,CAACmB,KAAK,CAAC,YAAY,EAAEiB,UAAU,EAAEvB,KAAK,EAAEC,KAAK,CAAC;gBACrD;gBACA;cACF;YACF;UACF,CAAC,CAAC,OAAOuB,SAAS,EAAE;YAClBrC,OAAO,CAACmB,KAAK,CAAC,YAAY,EAAEkB,SAAS,EAAExB,KAAK,EAAEC,KAAK,CAAC;YACpD;YACA;UACF;QACF;MACF;MAEAd,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEiC,aAAa,CAACI,MAAM,EAAEJ,aAAa,CAAC;;MAE7D;MACA,IAAIA,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;QAC9BtC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACzB;MAEAlB,aAAa,CAACmD,aAAa,CAAC;IAC9B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/BtC,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMiD,QAAQ,GAAGA,CAACrB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,KAAK;IACnD,IAAI;MACFd,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEU,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE,OAAO,EAAE9B,WAAW,CAAC;;MAE1E;MACA,IACE2B,OAAO,GAAG,CAAC,IAAIA,OAAO,IAAI,EAAE,IAAIC,OAAO,GAAG,CAAC,IAAIA,OAAO,IAAI,CAAC,IAC3DC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,EAAE,IAAIC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,CAAC,EACnD;QACA;MACF;MAEA,MAAME,KAAK,GAAGtC,KAAK,CAACiC,OAAO,CAAC,CAACC,OAAO,CAAC;MACrC,IAAI,CAACI,KAAK,IAAIA,KAAK,CAACe,KAAK,KAAK/C,WAAW,EAAE;QACzC;MACF;;MAEA;MACA,MAAMmB,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC/B,KAAK,CAAC,CAAC;;MAElD;MACA,MAAM6D,YAAY,GAAG;QACnB5B,OAAO;QACPC,OAAO;QACPC,KAAK;QACLC,KAAK;QACLE,KAAK,EAAEtC,KAAK,CAACiC,OAAO,CAAC,CAACC,OAAO,CAAC;QAC9BK,QAAQ,EAAEvC,KAAK,CAACmC,KAAK,CAAC,CAACC,KAAK,CAAC;QAC7BpC,KAAK,EAAE6B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC/B,KAAK,CAAC;MACzC,CAAC;;MAED;MACAyB,QAAQ,CAACU,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGX,QAAQ,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC;MACnDT,QAAQ,CAACQ,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,IAAI;;MAEjC;MACAjC,QAAQ,CAACwB,QAAQ,CAAC;MAClBtB,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,EAAE,CAAC;MACjBe,cAAc,CAAC0C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,YAAY,CAAC,CAAC;;MAE/C;MACA,MAAME,QAAQ,GAAGzD,WAAW,KAAKb,MAAM,CAACe,GAAG,GAAGf,MAAM,CAACiC,KAAK,GAAGjC,MAAM,CAACe,GAAG;MACvED,cAAc,CAACwD,QAAQ,CAAC;;MAExB;MACA,MAAMvB,SAAS,GAAGjD,OAAO,CAACkC,QAAQ,EAAEsC,QAAQ,CAAC;MAC7CjD,eAAe,CAAC0B,SAAS,CAAC;;MAE1B;MACA,MAAMwB,aAAa,GAAGxE,YAAY,CAACiC,QAAQ,EAAEnB,WAAW,CAAC;MACzD,IAAI0D,aAAa,CAACC,UAAU,EAAE;QAC5BvD,aAAa,CAAC,MAAM,CAAC;QACrBE,SAAS,CAACoD,aAAa,CAACrD,MAAM,CAAC;QAC/B;MACF;;MAEA;MACA,IAAIoD,QAAQ,KAAK9C,WAAW,EAAE;QAC5BiD,YAAY,CAACzC,QAAQ,CAAC;MACxB;IACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMyB,YAAY,GAAIC,YAAY,IAAK;IACrC;IACAxC,UAAU,CAAC,MAAM;MACf,IAAI;QACF,MAAMyC,OAAO,GAAGnD,WAAW,KAAKxB,MAAM,CAACe,GAAG,GAAGf,MAAM,CAACiC,KAAK,GAAGjC,MAAM,CAACe,GAAG;QACtEc,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE6C,OAAO,CAAC;;QAEhC;QACA,MAAMhB,IAAI,GAAG1D,WAAW,CAACyE,YAAY,EAAEC,OAAO,EAAErD,UAAU,CAAC;QAE3D,IAAIqC,IAAI,EAAE;UACR9B,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE6B,IAAI,CAAC;UAC1BE,QAAQ,CAACF,IAAI,CAACnB,OAAO,EAAEmB,IAAI,CAAClB,OAAO,EAAEkB,IAAI,CAACjB,KAAK,EAAEiB,IAAI,CAAChB,KAAK,CAAC;QAC9D,CAAC,MAAM;UACL;UACA,MAAMiC,KAAK,GAAG,EAAE;UAEhB,KAAK,IAAIpC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,EAAE,EAAEA,OAAO,EAAE,EAAE;YAC7C,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,CAAC,EAAEA,OAAO,EAAE,EAAE;cAC5C,MAAMI,KAAK,GAAG6B,YAAY,CAAClC,OAAO,CAAC,CAACC,OAAO,CAAC;cAC5C,IAAII,KAAK,IAAIA,KAAK,CAACe,KAAK,KAAKe,OAAO,EAAE;gBACpC,KAAK,IAAIjC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,EAAE,EAAEA,KAAK,EAAE,EAAE;kBACvC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,EAAE,EAAE;oBACtC,IAAI9C,WAAW,CAACgD,KAAK,EAAE6B,YAAY,EAAElC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC,EAAE;sBACpE,MAAMkC,SAAS,GAAGzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACoC,YAAY,CAAC,CAAC;sBAC1DG,SAAS,CAACnC,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGkC,SAAS,CAACrC,OAAO,CAAC,CAACC,OAAO,CAAC;sBACrDoC,SAAS,CAACrC,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,IAAI;sBAElC,IAAI,CAAC3C,OAAO,CAAC+E,SAAS,EAAEF,OAAO,CAAC,EAAE;wBAChCC,KAAK,CAACZ,IAAI,CAAC;0BAAExB,OAAO;0BAAEC,OAAO;0BAAEC,KAAK;0BAAEC;wBAAM,CAAC,CAAC;sBAChD;oBACF;kBACF;gBACF;cACF;YACF;UACF;UAEA,IAAIiC,KAAK,CAACT,MAAM,GAAG,CAAC,EAAE;YACpB,MAAMW,UAAU,GAAGF,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACT,MAAM,CAAC,CAAC;YAClEtC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEgD,UAAU,CAAC;YAClCjB,QAAQ,CAACiB,UAAU,CAACtC,OAAO,EAAEsC,UAAU,CAACrC,OAAO,EAAEqC,UAAU,CAACpC,KAAK,EAAEoC,UAAU,CAACnC,KAAK,CAAC;UACtF,CAAC,MAAM;YACLd,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;YAC1Bb,aAAa,CAAC,MAAM,CAAC;YACrBE,SAAS,CAACK,WAAW,CAAC;UACxB;QACF;MACF,CAAC,CAAC,OAAOwB,KAAK,EAAE;QACdnB,OAAO,CAACmB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;;EAED;EACA,MAAMkC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIxD,WAAW,CAACyC,MAAM,GAAG,CAAC,IAAInD,UAAU,KAAK,SAAS,EAAE;;IAExD;IACA,MAAMmE,aAAa,GAAGzD,WAAW,CAACA,WAAW,CAACyC,MAAM,GAAG,CAAC,CAAC;IACzD3D,QAAQ,CAAC2E,aAAa,CAAC5E,KAAK,CAAC;IAC7BoB,cAAc,CAACD,WAAW,CAAC0D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxC1E,eAAe,CAAC,IAAI,CAAC;IACrBE,aAAa,CAAC,EAAE,CAAC;IACjBE,cAAc,CAACU,WAAW,CAAC;IAC3BH,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;;EAED;EACA,MAAMgE,iBAAiB,GAAGA,CAAA,KAAM;IAC9B5D,cAAc,CAACD,WAAW,KAAKxB,MAAM,CAACe,GAAG,GAAGf,MAAM,CAACiC,KAAK,GAAGjC,MAAM,CAACe,GAAG,CAAC;EACxE,CAAC;;EAED;EACA,MAAMuE,gBAAgB,GAAIC,aAAa,IAAK;IAC1ChE,aAAa,CAACgE,aAAa,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB5D,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,IAAI,CAACrB,KAAK,EAAE,oBAAOH,OAAA;IAAAqF,QAAA,EAAK;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEpC,oBACEzF,OAAA;IAAK0F,SAAS,EAAC,gBAAgB;IAAAL,QAAA,gBAC7BrF,OAAA;MAAK0F,SAAS,EAAC,WAAW;MAAAL,QAAA,gBACxBrF,OAAA;QAAAqF,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbzF,OAAA;QAAK0F,SAAS,EAAC,cAAc;QAAAL,QAAA,gBAC3BrF,OAAA;UAAAqF,QAAA,GAAG,4BAAM,eAAArF,OAAA;YAAM0F,SAAS,EAAEjF,WAAW,KAAKb,MAAM,CAACe,GAAG,GAAG,UAAU,GAAG,YAAa;YAAA0E,QAAA,EAC9E5E,WAAW,KAAKb,MAAM,CAACe,GAAG,GAAG,IAAI,GAAG;UAAI;YAAA2E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EACVzE,YAAY,iBAAIhB,OAAA;UAAG0F,SAAS,EAAC,eAAe;UAAAL,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EACpD7E,UAAU,KAAK,MAAM,iBACpBZ,OAAA;UAAK0F,SAAS,EAAC,aAAa;UAAAL,QAAA,gBAC1BrF,OAAA;YAAAqF,QAAA,EAAG;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACZzF,OAAA;YAAAqF,QAAA,GAAIvE,MAAM,KAAKlB,MAAM,CAACe,GAAG,GAAG,IAAI,GAAG,IAAI,EAAC,cAAE;UAAA;YAAA2E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAENzF,OAAA;QAAK0F,SAAS,EAAC,eAAe;QAAAL,QAAA,gBAC5BrF,OAAA;UAAK0F,SAAS,EAAC,oBAAoB;UAAAL,QAAA,gBACjCrF,OAAA;YAAAqF,QAAA,EAAO;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpBzF,OAAA;YACE2F,KAAK,EAAEzE,UAAW;YAClB0E,QAAQ,EAAGC,CAAC,IAAKX,gBAAgB,CAACY,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;YAC1DK,QAAQ,EAAEpF,UAAU,KAAK,SAAS,IAAIU,WAAW,CAACyC,MAAM,GAAG,CAAE;YAAAsB,QAAA,gBAE7DrF,OAAA;cAAQ2F,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BzF,OAAA;cAAQ2F,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BzF,OAAA;cAAQ2F,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BzF,OAAA;cAAQ2F,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC7BzF,OAAA;cAAQ2F,KAAK,EAAE,CAAE;cAAAN,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENzF,OAAA;UAAK0F,SAAS,EAAC,eAAe;UAAAL,QAAA,gBAC5BrF,OAAA;YAAAqF,QAAA,EAAO;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClBzF,OAAA;YACE2F,KAAK,EAAEvE,WAAY;YACnBwE,QAAQ,EAAEA,CAAA,KAAMX,iBAAiB,CAAC,CAAE;YACpCe,QAAQ,EAAEpF,UAAU,KAAK,SAAS,IAAIU,WAAW,CAACyC,MAAM,GAAG,CAAE;YAAAsB,QAAA,gBAE7DrF,OAAA;cAAQ2F,KAAK,EAAE/F,MAAM,CAACe,GAAI;cAAA0E,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtCzF,OAAA;cAAQ2F,KAAK,EAAE/F,MAAM,CAACiC,KAAM;cAAAwD,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENzF,OAAA;UACE0F,SAAS,EAAC,mBAAmB;UAC7BO,OAAO,EAAEnB,UAAW;UACpBkB,QAAQ,EAAE1E,WAAW,CAACyC,MAAM,GAAG,CAAC,IAAInD,UAAU,KAAK,SAAU;UAAAyE,QAAA,EAC9D;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETzF,OAAA;UACE0F,SAAS,EAAC,iBAAiB;UAC3BO,OAAO,EAAEtE,SAAU;UAAA0D,QAAA,EACpB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAETzF,OAAA;UACE0F,SAAS,EAAC,mBAAmB;UAC7BO,OAAO,EAAEb,QAAS;UAAAC,QAAA,EACnB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENzF,OAAA;MAAK0F,SAAS,EAAC,iBAAiB;MAAAL,QAAA,eAC9BrF,OAAA,CAACF,UAAU;QACTK,KAAK,EAAEA,KAAM;QACbE,YAAY,EAAEA,YAAa;QAC3BE,UAAU,EAAEA,UAAW;QACvB2F,WAAW,EAAEpD,eAAgB;QAC7BqD,QAAQ,EAAE/E,WAAW,KAAKxB,MAAM,CAACiC;MAAM;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvF,EAAA,CAneID,MAAM;EAAA,QAYOV,WAAW;AAAA;AAAA6G,EAAA,GAZxBnG,MAAM;AAqeZ,eAAeA,MAAM;AAAC,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}